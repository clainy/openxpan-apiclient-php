<?php
/**
 * XpanFileCreate200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Clainy\OpenxpanApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * XPan NAS API
 *
 * API for accessing XPan NAS data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Clainy\OpenxpanApiClient\Model;

use \ArrayAccess;
use \Clainy\OpenxpanApiClient\ObjectSerializer;

/**
 * XpanFileCreate200Response Class Doc Comment
 *
 * @category Class
 * @package  Clainy\OpenxpanApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class XpanFileCreate200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'XpanFileCreate_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'errno' => 'int',
        'fs_id' => 'int',
        'md5' => 'string',
        'server_filename' => 'string',
        'category' => 'int',
        'path' => 'string',
        'size' => 'int',
        'ctime' => 'int',
        'mtime' => 'int',
        'isdir' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'errno' => null,
        'fs_id' => null,
        'md5' => null,
        'server_filename' => null,
        'category' => null,
        'path' => null,
        'size' => null,
        'ctime' => null,
        'mtime' => null,
        'isdir' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'errno' => false,
		'fs_id' => false,
		'md5' => false,
		'server_filename' => false,
		'category' => false,
		'path' => false,
		'size' => false,
		'ctime' => false,
		'mtime' => false,
		'isdir' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'errno' => 'errno',
        'fs_id' => 'fs_id',
        'md5' => 'md5',
        'server_filename' => 'server_filename',
        'category' => 'category',
        'path' => 'path',
        'size' => 'size',
        'ctime' => 'ctime',
        'mtime' => 'mtime',
        'isdir' => 'isdir'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'errno' => 'setErrno',
        'fs_id' => 'setFsId',
        'md5' => 'setMd5',
        'server_filename' => 'setServerFilename',
        'category' => 'setCategory',
        'path' => 'setPath',
        'size' => 'setSize',
        'ctime' => 'setCtime',
        'mtime' => 'setMtime',
        'isdir' => 'setIsdir'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'errno' => 'getErrno',
        'fs_id' => 'getFsId',
        'md5' => 'getMd5',
        'server_filename' => 'getServerFilename',
        'category' => 'getCategory',
        'path' => 'getPath',
        'size' => 'getSize',
        'ctime' => 'getCtime',
        'mtime' => 'getMtime',
        'isdir' => 'getIsdir'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('errno', $data ?? [], null);
        $this->setIfExists('fs_id', $data ?? [], null);
        $this->setIfExists('md5', $data ?? [], null);
        $this->setIfExists('server_filename', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('ctime', $data ?? [], null);
        $this->setIfExists('mtime', $data ?? [], null);
        $this->setIfExists('isdir', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['errno'] === null) {
            $invalidProperties[] = "'errno' can't be null";
        }
        if ($this->container['fs_id'] === null) {
            $invalidProperties[] = "'fs_id' can't be null";
        }
        if ($this->container['md5'] === null) {
            $invalidProperties[] = "'md5' can't be null";
        }
        if ($this->container['server_filename'] === null) {
            $invalidProperties[] = "'server_filename' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['path'] === null) {
            $invalidProperties[] = "'path' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['ctime'] === null) {
            $invalidProperties[] = "'ctime' can't be null";
        }
        if ($this->container['mtime'] === null) {
            $invalidProperties[] = "'mtime' can't be null";
        }
        if ($this->container['isdir'] === null) {
            $invalidProperties[] = "'isdir' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets errno
     *
     * @return int
     */
    public function getErrno()
    {
        return $this->container['errno'];
    }

    /**
     * Sets errno
     *
     * @param int $errno 错误码
     *
     * @return self
     */
    public function setErrno($errno)
    {
        if (is_null($errno)) {
            throw new \InvalidArgumentException('non-nullable errno cannot be null');
        }
        $this->container['errno'] = $errno;

        return $this;
    }

    /**
     * Gets fs_id
     *
     * @return int
     */
    public function getFsId()
    {
        return $this->container['fs_id'];
    }

    /**
     * Sets fs_id
     *
     * @param int $fs_id 文件在云端的唯一标识ID
     *
     * @return self
     */
    public function setFsId($fs_id)
    {
        if (is_null($fs_id)) {
            throw new \InvalidArgumentException('non-nullable fs_id cannot be null');
        }
        $this->container['fs_id'] = $fs_id;

        return $this;
    }

    /**
     * Gets md5
     *
     * @return string
     */
    public function getMd5()
    {
        return $this->container['md5'];
    }

    /**
     * Sets md5
     *
     * @param string $md5 文件的MD5，只有提交文件时才返回，提交目录时没有该值
     *
     * @return self
     */
    public function setMd5($md5)
    {
        if (is_null($md5)) {
            throw new \InvalidArgumentException('non-nullable md5 cannot be null');
        }
        $this->container['md5'] = $md5;

        return $this;
    }

    /**
     * Gets server_filename
     *
     * @return string
     */
    public function getServerFilename()
    {
        return $this->container['server_filename'];
    }

    /**
     * Sets server_filename
     *
     * @param string $server_filename 文件名
     *
     * @return self
     */
    public function setServerFilename($server_filename)
    {
        if (is_null($server_filename)) {
            throw new \InvalidArgumentException('non-nullable server_filename cannot be null');
        }
        $this->container['server_filename'] = $server_filename;

        return $this;
    }

    /**
     * Gets category
     *
     * @return int
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param int $category 创建文件: 分类类型, 1 视频 2 音频 3 图片 4 文档 5 应用 6 其他 7 种子; 创建文件夹: 分类类型, 6 文件夹
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path 上传后使用的文件绝对路径
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size 文件大小，单位B
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets ctime
     *
     * @return int
     */
    public function getCtime()
    {
        return $this->container['ctime'];
    }

    /**
     * Sets ctime
     *
     * @param int $ctime 文件创建时间
     *
     * @return self
     */
    public function setCtime($ctime)
    {
        if (is_null($ctime)) {
            throw new \InvalidArgumentException('non-nullable ctime cannot be null');
        }
        $this->container['ctime'] = $ctime;

        return $this;
    }

    /**
     * Gets mtime
     *
     * @return int
     */
    public function getMtime()
    {
        return $this->container['mtime'];
    }

    /**
     * Sets mtime
     *
     * @param int $mtime 文件修改时间
     *
     * @return self
     */
    public function setMtime($mtime)
    {
        if (is_null($mtime)) {
            throw new \InvalidArgumentException('non-nullable mtime cannot be null');
        }
        $this->container['mtime'] = $mtime;

        return $this;
    }

    /**
     * Gets isdir
     *
     * @return int
     */
    public function getIsdir()
    {
        return $this->container['isdir'];
    }

    /**
     * Sets isdir
     *
     * @param int $isdir 是否目录，0 文件、1 目录
     *
     * @return self
     */
    public function setIsdir($isdir)
    {
        if (is_null($isdir)) {
            throw new \InvalidArgumentException('non-nullable isdir cannot be null');
        }
        $this->container['isdir'] = $isdir;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


