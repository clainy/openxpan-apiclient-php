<?php
/**
 * ResponseList
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Clainy\OpenxpanApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * XPan NAS API
 *
 * API for accessing XPan NAS data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Clainy\OpenxpanApiClient\Model;

use \ArrayAccess;
use \Clainy\OpenxpanApiClient\ObjectSerializer;

/**
 * ResponseList Class Doc Comment
 *
 * @category Class
 * @description 缩略图地址; 文件缩略图; 缩略图地址; 图片拍摄时间
 * @package  Clainy\OpenxpanApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResponseList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResponseList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category' => 'int',
        'dlink' => 'string',
        'file_name' => 'string',
        'isdir' => 'int',
        'server_ctime' => 'int',
        'server_mtime' => 'int',
        'size' => 'int',
        'thumbs' => 'string[]',
        'height' => 'int',
        'width' => 'int',
        'date_taken' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'category' => null,
        'dlink' => null,
        'file_name' => null,
        'isdir' => null,
        'server_ctime' => null,
        'server_mtime' => null,
        'size' => null,
        'thumbs' => null,
        'height' => null,
        'width' => null,
        'date_taken' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'category' => false,
		'dlink' => false,
		'file_name' => false,
		'isdir' => false,
		'server_ctime' => false,
		'server_mtime' => false,
		'size' => false,
		'thumbs' => false,
		'height' => false,
		'width' => false,
		'date_taken' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'dlink' => 'dlink',
        'file_name' => 'file_name',
        'isdir' => 'isdir',
        'server_ctime' => 'server_ctime',
        'server_mtime' => 'server_mtime',
        'size' => 'size',
        'thumbs' => 'thumbs',
        'height' => 'height',
        'width' => 'width',
        'date_taken' => 'date_taken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'dlink' => 'setDlink',
        'file_name' => 'setFileName',
        'isdir' => 'setIsdir',
        'server_ctime' => 'setServerCtime',
        'server_mtime' => 'setServerMtime',
        'size' => 'setSize',
        'thumbs' => 'setThumbs',
        'height' => 'setHeight',
        'width' => 'setWidth',
        'date_taken' => 'setDateTaken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'dlink' => 'getDlink',
        'file_name' => 'getFileName',
        'isdir' => 'getIsdir',
        'server_ctime' => 'getServerCtime',
        'server_mtime' => 'getServerMtime',
        'size' => 'getSize',
        'thumbs' => 'getThumbs',
        'height' => 'getHeight',
        'width' => 'getWidth',
        'date_taken' => 'getDateTaken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('dlink', $data ?? [], null);
        $this->setIfExists('file_name', $data ?? [], null);
        $this->setIfExists('isdir', $data ?? [], null);
        $this->setIfExists('server_ctime', $data ?? [], null);
        $this->setIfExists('server_mtime', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('thumbs', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('date_taken', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return int|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param int|null $category 文件类型，含义如下：1 视频， 2 音乐，3 图片，4 文档，5 应用，6 其他，7 种子
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets dlink
     *
     * @return string|null
     */
    public function getDlink()
    {
        return $this->container['dlink'];
    }

    /**
     * Sets dlink
     *
     * @param string|null $dlink 文件下载地址，参考下载文档进行下载操作
     *
     * @return self
     */
    public function setDlink($dlink)
    {
        if (is_null($dlink)) {
            throw new \InvalidArgumentException('non-nullable dlink cannot be null');
        }
        $this->container['dlink'] = $dlink;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name 文件名
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        if (is_null($file_name)) {
            throw new \InvalidArgumentException('non-nullable file_name cannot be null');
        }
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets isdir
     *
     * @return int|null
     */
    public function getIsdir()
    {
        return $this->container['isdir'];
    }

    /**
     * Sets isdir
     *
     * @param int|null $isdir 是否是目录，为1表示目录，为0表示非目录
     *
     * @return self
     */
    public function setIsdir($isdir)
    {
        if (is_null($isdir)) {
            throw new \InvalidArgumentException('non-nullable isdir cannot be null');
        }
        $this->container['isdir'] = $isdir;

        return $this;
    }

    /**
     * Gets server_ctime
     *
     * @return int|null
     */
    public function getServerCtime()
    {
        return $this->container['server_ctime'];
    }

    /**
     * Sets server_ctime
     *
     * @param int|null $server_ctime 文件的服务器创建Unix时间戳，单位秒
     *
     * @return self
     */
    public function setServerCtime($server_ctime)
    {
        if (is_null($server_ctime)) {
            throw new \InvalidArgumentException('non-nullable server_ctime cannot be null');
        }
        $this->container['server_ctime'] = $server_ctime;

        return $this;
    }

    /**
     * Gets server_mtime
     *
     * @return int|null
     */
    public function getServerMtime()
    {
        return $this->container['server_mtime'];
    }

    /**
     * Sets server_mtime
     *
     * @param int|null $server_mtime 文件的服务器修改Unix时间戳，单位秒
     *
     * @return self
     */
    public function setServerMtime($server_mtime)
    {
        if (is_null($server_mtime)) {
            throw new \InvalidArgumentException('non-nullable server_mtime cannot be null');
        }
        $this->container['server_mtime'] = $server_mtime;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size 文件大小，单位字节
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets thumbs
     *
     * @return string[]|null
     */
    public function getThumbs()
    {
        return $this->container['thumbs'];
    }

    /**
     * Sets thumbs
     *
     * @param string[]|null $thumbs 缩略图地址
     *
     * @return self
     */
    public function setThumbs($thumbs)
    {
        if (is_null($thumbs)) {
            throw new \InvalidArgumentException('non-nullable thumbs cannot be null');
        }
        $this->container['thumbs'] = $thumbs;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height 图片高度
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width 图片宽度
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets date_taken
     *
     * @return int|null
     */
    public function getDateTaken()
    {
        return $this->container['date_taken'];
    }

    /**
     * Sets date_taken
     *
     * @param int|null $date_taken 图片拍摄时间
     *
     * @return self
     */
    public function setDateTaken($date_taken)
    {
        if (is_null($date_taken)) {
            throw new \InvalidArgumentException('non-nullable date_taken cannot be null');
        }
        $this->container['date_taken'] = $date_taken;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


