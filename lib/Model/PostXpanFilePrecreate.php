<?php
/**
 * PostXpanFilePrecreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Clainy\OpenxpanApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * XPan NAS API
 *
 * API for accessing XPan NAS data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Clainy\OpenxpanApiClient\Model;

use \ArrayAccess;
use \Clainy\OpenxpanApiClient\ObjectSerializer;

/**
 * PostXpanFilePrecreate Class Doc Comment
 *
 * @category Class
 * @package  Clainy\OpenxpanApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostXpanFilePrecreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PostXpanFilePrecreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'path' => 'string',
        'size' => 'int',
        'isdir' => 'int',
        'block_list' => 'string[]',
        'autoinit' => 'int',
        'rtype' => 'int',
        'uploadid' => 'string',
        'content_md5' => 'string',
        'slice_md5' => 'string',
        'local_ctime' => 'string',
        'local_mtime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'path' => null,
        'size' => null,
        'isdir' => null,
        'block_list' => null,
        'autoinit' => null,
        'rtype' => null,
        'uploadid' => null,
        'content_md5' => null,
        'slice_md5' => null,
        'local_ctime' => null,
        'local_mtime' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'path' => false,
		'size' => false,
		'isdir' => false,
		'block_list' => false,
		'autoinit' => false,
		'rtype' => false,
		'uploadid' => false,
		'content_md5' => false,
		'slice_md5' => false,
		'local_ctime' => false,
		'local_mtime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'path' => 'path',
        'size' => 'size',
        'isdir' => 'isdir',
        'block_list' => 'block_list',
        'autoinit' => 'autoinit',
        'rtype' => 'rtype',
        'uploadid' => 'uploadid',
        'content_md5' => 'content-md5',
        'slice_md5' => 'slice-md5',
        'local_ctime' => 'local_ctime',
        'local_mtime' => 'local_mtime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'path' => 'setPath',
        'size' => 'setSize',
        'isdir' => 'setIsdir',
        'block_list' => 'setBlockList',
        'autoinit' => 'setAutoinit',
        'rtype' => 'setRtype',
        'uploadid' => 'setUploadid',
        'content_md5' => 'setContentMd5',
        'slice_md5' => 'setSliceMd5',
        'local_ctime' => 'setLocalCtime',
        'local_mtime' => 'setLocalMtime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'path' => 'getPath',
        'size' => 'getSize',
        'isdir' => 'getIsdir',
        'block_list' => 'getBlockList',
        'autoinit' => 'getAutoinit',
        'rtype' => 'getRtype',
        'uploadid' => 'getUploadid',
        'content_md5' => 'getContentMd5',
        'slice_md5' => 'getSliceMd5',
        'local_ctime' => 'getLocalCtime',
        'local_mtime' => 'getLocalMtime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('isdir', $data ?? [], null);
        $this->setIfExists('block_list', $data ?? [], null);
        $this->setIfExists('autoinit', $data ?? [], null);
        $this->setIfExists('rtype', $data ?? [], null);
        $this->setIfExists('uploadid', $data ?? [], null);
        $this->setIfExists('content_md5', $data ?? [], null);
        $this->setIfExists('slice_md5', $data ?? [], null);
        $this->setIfExists('local_ctime', $data ?? [], null);
        $this->setIfExists('local_mtime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path 上传后使用的文件绝对路径，需要urlencode
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size 文件和目录两种情况：上传文件时，表示文件的大小，单位B；上传目录时，表示目录的大小，目录的话大小默认为0
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets isdir
     *
     * @return int|null
     */
    public function getIsdir()
    {
        return $this->container['isdir'];
    }

    /**
     * Sets isdir
     *
     * @param int|null $isdir 是否为目录，0 文件，1 目录
     *
     * @return self
     */
    public function setIsdir($isdir)
    {
        if (is_null($isdir)) {
            throw new \InvalidArgumentException('non-nullable isdir cannot be null');
        }
        $this->container['isdir'] = $isdir;

        return $this;
    }

    /**
     * Gets block_list
     *
     * @return string[]|null
     */
    public function getBlockList()
    {
        return $this->container['block_list'];
    }

    /**
     * Sets block_list
     *
     * @param string[]|null $block_list 文件各分片MD5数组的json串。block_list的含义如下，如果上传的文件小于4MB，其md5值（32位小写）即为block_list字符串数组的唯一元素；如果上传的文件大于4MB，需要将上传的文件按照4MB大小在本地切分成分片，不足4MB的分片自动成为最后一个分片，所有分片的md5值（32位小写）组成的字符串数组即为block_list。
     *
     * @return self
     */
    public function setBlockList($block_list)
    {
        if (is_null($block_list)) {
            throw new \InvalidArgumentException('non-nullable block_list cannot be null');
        }
        $this->container['block_list'] = $block_list;

        return $this;
    }

    /**
     * Gets autoinit
     *
     * @return int|null
     */
    public function getAutoinit()
    {
        return $this->container['autoinit'];
    }

    /**
     * Sets autoinit
     *
     * @param int|null $autoinit 固定值1
     *
     * @return self
     */
    public function setAutoinit($autoinit)
    {
        if (is_null($autoinit)) {
            throw new \InvalidArgumentException('non-nullable autoinit cannot be null');
        }
        $this->container['autoinit'] = $autoinit;

        return $this;
    }

    /**
     * Gets rtype
     *
     * @return int|null
     */
    public function getRtype()
    {
        return $this->container['rtype'];
    }

    /**
     * Sets rtype
     *
     * @param int|null $rtype 文件命名策略。1 表示当path冲突时，进行重命名2 表示当path冲突且block_list不同时，进行重命名3 当云端存在同名文件时，对该文件进行覆盖
     *
     * @return self
     */
    public function setRtype($rtype)
    {
        if (is_null($rtype)) {
            throw new \InvalidArgumentException('non-nullable rtype cannot be null');
        }
        $this->container['rtype'] = $rtype;

        return $this;
    }

    /**
     * Gets uploadid
     *
     * @return string|null
     */
    public function getUploadid()
    {
        return $this->container['uploadid'];
    }

    /**
     * Sets uploadid
     *
     * @param string|null $uploadid 上传ID
     *
     * @return self
     */
    public function setUploadid($uploadid)
    {
        if (is_null($uploadid)) {
            throw new \InvalidArgumentException('non-nullable uploadid cannot be null');
        }
        $this->container['uploadid'] = $uploadid;

        return $this;
    }

    /**
     * Gets content_md5
     *
     * @return string|null
     */
    public function getContentMd5()
    {
        return $this->container['content_md5'];
    }

    /**
     * Sets content_md5
     *
     * @param string|null $content_md5 文件MD5，32位小写
     *
     * @return self
     */
    public function setContentMd5($content_md5)
    {
        if (is_null($content_md5)) {
            throw new \InvalidArgumentException('non-nullable content_md5 cannot be null');
        }
        $this->container['content_md5'] = $content_md5;

        return $this;
    }

    /**
     * Gets slice_md5
     *
     * @return string|null
     */
    public function getSliceMd5()
    {
        return $this->container['slice_md5'];
    }

    /**
     * Sets slice_md5
     *
     * @param string|null $slice_md5 文件校验段的MD5，32位小写，校验段对应文件前256KB
     *
     * @return self
     */
    public function setSliceMd5($slice_md5)
    {
        if (is_null($slice_md5)) {
            throw new \InvalidArgumentException('non-nullable slice_md5 cannot be null');
        }
        $this->container['slice_md5'] = $slice_md5;

        return $this;
    }

    /**
     * Gets local_ctime
     *
     * @return string|null
     */
    public function getLocalCtime()
    {
        return $this->container['local_ctime'];
    }

    /**
     * Sets local_ctime
     *
     * @param string|null $local_ctime 客户端创建时间， 默认为当前时间戳
     *
     * @return self
     */
    public function setLocalCtime($local_ctime)
    {
        if (is_null($local_ctime)) {
            throw new \InvalidArgumentException('non-nullable local_ctime cannot be null');
        }
        $this->container['local_ctime'] = $local_ctime;

        return $this;
    }

    /**
     * Gets local_mtime
     *
     * @return string|null
     */
    public function getLocalMtime()
    {
        return $this->container['local_mtime'];
    }

    /**
     * Sets local_mtime
     *
     * @param string|null $local_mtime 客户端修改时间，默认为当前时间戳
     *
     * @return self
     */
    public function setLocalMtime($local_mtime)
    {
        if (is_null($local_mtime)) {
            throw new \InvalidArgumentException('non-nullable local_mtime cannot be null');
        }
        $this->container['local_mtime'] = $local_mtime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


