<?php
/**
 * XpanFileList200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Clainy\OpenxpanApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * XPan NAS API
 *
 * API for accessing XPan NAS data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Clainy\OpenxpanApiClient\Model;

use \ArrayAccess;
use \Clainy\OpenxpanApiClient\ObjectSerializer;

/**
 * XpanFileList200Response Class Doc Comment
 *
 * @category Class
 * @package  Clainy\OpenxpanApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class XpanFileList200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'XpanFileList_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fs_id' => 'int',
        'path' => 'string',
        'server_filename' => 'string',
        'size' => 'int',
        'server_mtime' => 'int',
        'server_ctime' => 'int',
        'local_mtime' => 'int',
        'local_ctime' => 'int',
        'isdir' => 'int',
        'category' => 'int',
        'md5' => 'string',
        'dir_empty' => 'int',
        'thumbs' => 'string[]',
        'info' => '\Clainy\OpenxpanApiClient\Model\ResponseInfo[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fs_id' => null,
        'path' => null,
        'server_filename' => null,
        'size' => null,
        'server_mtime' => null,
        'server_ctime' => null,
        'local_mtime' => null,
        'local_ctime' => null,
        'isdir' => null,
        'category' => null,
        'md5' => null,
        'dir_empty' => null,
        'thumbs' => null,
        'info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fs_id' => false,
		'path' => false,
		'server_filename' => false,
		'size' => false,
		'server_mtime' => false,
		'server_ctime' => false,
		'local_mtime' => false,
		'local_ctime' => false,
		'isdir' => false,
		'category' => false,
		'md5' => false,
		'dir_empty' => false,
		'thumbs' => false,
		'info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fs_id' => 'fs_id',
        'path' => 'path',
        'server_filename' => 'server_filename',
        'size' => 'size',
        'server_mtime' => 'server_mtime',
        'server_ctime' => 'server_ctime',
        'local_mtime' => 'local_mtime',
        'local_ctime' => 'local_ctime',
        'isdir' => 'isdir',
        'category' => 'category',
        'md5' => 'md5',
        'dir_empty' => 'dir_empty',
        'thumbs' => 'thumbs',
        'info' => 'info'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fs_id' => 'setFsId',
        'path' => 'setPath',
        'server_filename' => 'setServerFilename',
        'size' => 'setSize',
        'server_mtime' => 'setServerMtime',
        'server_ctime' => 'setServerCtime',
        'local_mtime' => 'setLocalMtime',
        'local_ctime' => 'setLocalCtime',
        'isdir' => 'setIsdir',
        'category' => 'setCategory',
        'md5' => 'setMd5',
        'dir_empty' => 'setDirEmpty',
        'thumbs' => 'setThumbs',
        'info' => 'setInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fs_id' => 'getFsId',
        'path' => 'getPath',
        'server_filename' => 'getServerFilename',
        'size' => 'getSize',
        'server_mtime' => 'getServerMtime',
        'server_ctime' => 'getServerCtime',
        'local_mtime' => 'getLocalMtime',
        'local_ctime' => 'getLocalCtime',
        'isdir' => 'getIsdir',
        'category' => 'getCategory',
        'md5' => 'getMd5',
        'dir_empty' => 'getDirEmpty',
        'thumbs' => 'getThumbs',
        'info' => 'getInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('fs_id', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('server_filename', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('server_mtime', $data ?? [], null);
        $this->setIfExists('server_ctime', $data ?? [], null);
        $this->setIfExists('local_mtime', $data ?? [], null);
        $this->setIfExists('local_ctime', $data ?? [], null);
        $this->setIfExists('isdir', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('md5', $data ?? [], null);
        $this->setIfExists('dir_empty', $data ?? [], null);
        $this->setIfExists('thumbs', $data ?? [], null);
        $this->setIfExists('info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['fs_id'] === null) {
            $invalidProperties[] = "'fs_id' can't be null";
        }
        if ($this->container['path'] === null) {
            $invalidProperties[] = "'path' can't be null";
        }
        if ($this->container['server_filename'] === null) {
            $invalidProperties[] = "'server_filename' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['server_mtime'] === null) {
            $invalidProperties[] = "'server_mtime' can't be null";
        }
        if ($this->container['server_ctime'] === null) {
            $invalidProperties[] = "'server_ctime' can't be null";
        }
        if ($this->container['local_mtime'] === null) {
            $invalidProperties[] = "'local_mtime' can't be null";
        }
        if ($this->container['local_ctime'] === null) {
            $invalidProperties[] = "'local_ctime' can't be null";
        }
        if ($this->container['isdir'] === null) {
            $invalidProperties[] = "'isdir' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['md5'] === null) {
            $invalidProperties[] = "'md5' can't be null";
        }
        if ($this->container['dir_empty'] === null) {
            $invalidProperties[] = "'dir_empty' can't be null";
        }
        if ($this->container['thumbs'] === null) {
            $invalidProperties[] = "'thumbs' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fs_id
     *
     * @return int
     */
    public function getFsId()
    {
        return $this->container['fs_id'];
    }

    /**
     * Sets fs_id
     *
     * @param int $fs_id 文件在云端的唯一标识ID
     *
     * @return self
     */
    public function setFsId($fs_id)
    {
        if (is_null($fs_id)) {
            throw new \InvalidArgumentException('non-nullable fs_id cannot be null');
        }
        $this->container['fs_id'] = $fs_id;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path 文件的绝对路径
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets server_filename
     *
     * @return string
     */
    public function getServerFilename()
    {
        return $this->container['server_filename'];
    }

    /**
     * Sets server_filename
     *
     * @param string $server_filename 文件名称
     *
     * @return self
     */
    public function setServerFilename($server_filename)
    {
        if (is_null($server_filename)) {
            throw new \InvalidArgumentException('non-nullable server_filename cannot be null');
        }
        $this->container['server_filename'] = $server_filename;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size 文件大小，单位B
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets server_mtime
     *
     * @return int
     */
    public function getServerMtime()
    {
        return $this->container['server_mtime'];
    }

    /**
     * Sets server_mtime
     *
     * @param int $server_mtime 文件在服务器修改时间
     *
     * @return self
     */
    public function setServerMtime($server_mtime)
    {
        if (is_null($server_mtime)) {
            throw new \InvalidArgumentException('non-nullable server_mtime cannot be null');
        }
        $this->container['server_mtime'] = $server_mtime;

        return $this;
    }

    /**
     * Gets server_ctime
     *
     * @return int
     */
    public function getServerCtime()
    {
        return $this->container['server_ctime'];
    }

    /**
     * Sets server_ctime
     *
     * @param int $server_ctime 文件在服务器创建时间
     *
     * @return self
     */
    public function setServerCtime($server_ctime)
    {
        if (is_null($server_ctime)) {
            throw new \InvalidArgumentException('non-nullable server_ctime cannot be null');
        }
        $this->container['server_ctime'] = $server_ctime;

        return $this;
    }

    /**
     * Gets local_mtime
     *
     * @return int
     */
    public function getLocalMtime()
    {
        return $this->container['local_mtime'];
    }

    /**
     * Sets local_mtime
     *
     * @param int $local_mtime 文件在客户端修改时间
     *
     * @return self
     */
    public function setLocalMtime($local_mtime)
    {
        if (is_null($local_mtime)) {
            throw new \InvalidArgumentException('non-nullable local_mtime cannot be null');
        }
        $this->container['local_mtime'] = $local_mtime;

        return $this;
    }

    /**
     * Gets local_ctime
     *
     * @return int
     */
    public function getLocalCtime()
    {
        return $this->container['local_ctime'];
    }

    /**
     * Sets local_ctime
     *
     * @param int $local_ctime 文件在客户端创建时间
     *
     * @return self
     */
    public function setLocalCtime($local_ctime)
    {
        if (is_null($local_ctime)) {
            throw new \InvalidArgumentException('non-nullable local_ctime cannot be null');
        }
        $this->container['local_ctime'] = $local_ctime;

        return $this;
    }

    /**
     * Gets isdir
     *
     * @return int
     */
    public function getIsdir()
    {
        return $this->container['isdir'];
    }

    /**
     * Sets isdir
     *
     * @param int $isdir 是否为目录，0 文件、1 目录
     *
     * @return self
     */
    public function setIsdir($isdir)
    {
        if (is_null($isdir)) {
            throw new \InvalidArgumentException('non-nullable isdir cannot be null');
        }
        $this->container['isdir'] = $isdir;

        return $this;
    }

    /**
     * Gets category
     *
     * @return int
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param int $category 文件类型，1 视频、2 音频、3 图片、4 文档、5 应用、6 其他、7 种子
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets md5
     *
     * @return string
     */
    public function getMd5()
    {
        return $this->container['md5'];
    }

    /**
     * Sets md5
     *
     * @param string $md5 云端哈希（非文件真实MD5），只有是文件类型时，该字段才存在
     *
     * @return self
     */
    public function setMd5($md5)
    {
        if (is_null($md5)) {
            throw new \InvalidArgumentException('non-nullable md5 cannot be null');
        }
        $this->container['md5'] = $md5;

        return $this;
    }

    /**
     * Gets dir_empty
     *
     * @return int
     */
    public function getDirEmpty()
    {
        return $this->container['dir_empty'];
    }

    /**
     * Sets dir_empty
     *
     * @param int $dir_empty 该目录是否存在子目录，只有请求参数web=1且该条目为目录时，该字段才存在， 0为存在， 1为不存在
     *
     * @return self
     */
    public function setDirEmpty($dir_empty)
    {
        if (is_null($dir_empty)) {
            throw new \InvalidArgumentException('non-nullable dir_empty cannot be null');
        }
        $this->container['dir_empty'] = $dir_empty;

        return $this;
    }

    /**
     * Gets thumbs
     *
     * @return string[]
     */
    public function getThumbs()
    {
        return $this->container['thumbs'];
    }

    /**
     * Sets thumbs
     *
     * @param string[] $thumbs 只有请求参数web=1且该条目分类为图片时，该字段才存在，包含三个尺寸的缩略图URL
     *
     * @return self
     */
    public function setThumbs($thumbs)
    {
        if (is_null($thumbs)) {
            throw new \InvalidArgumentException('non-nullable thumbs cannot be null');
        }
        $this->container['thumbs'] = $thumbs;

        return $this;
    }

    /**
     * Gets info
     *
     * @return \Clainy\OpenxpanApiClient\Model\ResponseInfo[]|null
     */
    public function getInfo()
    {
        return $this->container['info'];
    }

    /**
     * Sets info
     *
     * @param \Clainy\OpenxpanApiClient\Model\ResponseInfo[]|null $info info
     *
     * @return self
     */
    public function setInfo($info)
    {
        if (is_null($info)) {
            throw new \InvalidArgumentException('non-nullable info cannot be null');
        }
        $this->container['info'] = $info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


