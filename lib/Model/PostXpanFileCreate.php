<?php
/**
 * PostXpanFileCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Clainy\OpenxpanApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * XPan NAS API
 *
 * API for accessing XPan NAS data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Clainy\OpenxpanApiClient\Model;

use \ArrayAccess;
use \Clainy\OpenxpanApiClient\ObjectSerializer;

/**
 * PostXpanFileCreate Class Doc Comment
 *
 * @category Class
 * @package  Clainy\OpenxpanApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostXpanFileCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PostXpanFileCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'path' => 'string',
        'size' => 'string',
        'isdir' => 'string',
        'block_list' => 'string[]',
        'uploadid' => 'string',
        'rtype' => 'int',
        'local_ctime' => 'int',
        'local_mtime' => 'int',
        'zip_quality' => 'int',
        'zip_sign' => 'int',
        'is_revision' => 'int',
        'mode' => 'int',
        'exif_info' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'path' => null,
        'size' => null,
        'isdir' => null,
        'block_list' => null,
        'uploadid' => null,
        'rtype' => null,
        'local_ctime' => null,
        'local_mtime' => null,
        'zip_quality' => null,
        'zip_sign' => null,
        'is_revision' => null,
        'mode' => null,
        'exif_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'path' => false,
		'size' => false,
		'isdir' => false,
		'block_list' => false,
		'uploadid' => false,
		'rtype' => false,
		'local_ctime' => false,
		'local_mtime' => false,
		'zip_quality' => false,
		'zip_sign' => false,
		'is_revision' => false,
		'mode' => false,
		'exif_info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'path' => 'path',
        'size' => 'size',
        'isdir' => 'isdir',
        'block_list' => 'block_list',
        'uploadid' => 'uploadid',
        'rtype' => 'rtype',
        'local_ctime' => 'local_ctime',
        'local_mtime' => 'local_mtime',
        'zip_quality' => 'zip_quality',
        'zip_sign' => 'zip_sign',
        'is_revision' => 'is_revision',
        'mode' => 'mode',
        'exif_info' => 'exif_info'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'path' => 'setPath',
        'size' => 'setSize',
        'isdir' => 'setIsdir',
        'block_list' => 'setBlockList',
        'uploadid' => 'setUploadid',
        'rtype' => 'setRtype',
        'local_ctime' => 'setLocalCtime',
        'local_mtime' => 'setLocalMtime',
        'zip_quality' => 'setZipQuality',
        'zip_sign' => 'setZipSign',
        'is_revision' => 'setIsRevision',
        'mode' => 'setMode',
        'exif_info' => 'setExifInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'path' => 'getPath',
        'size' => 'getSize',
        'isdir' => 'getIsdir',
        'block_list' => 'getBlockList',
        'uploadid' => 'getUploadid',
        'rtype' => 'getRtype',
        'local_ctime' => 'getLocalCtime',
        'local_mtime' => 'getLocalMtime',
        'zip_quality' => 'getZipQuality',
        'zip_sign' => 'getZipSign',
        'is_revision' => 'getIsRevision',
        'mode' => 'getMode',
        'exif_info' => 'getExifInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('isdir', $data ?? [], null);
        $this->setIfExists('block_list', $data ?? [], null);
        $this->setIfExists('uploadid', $data ?? [], null);
        $this->setIfExists('rtype', $data ?? [], null);
        $this->setIfExists('local_ctime', $data ?? [], null);
        $this->setIfExists('local_mtime', $data ?? [], null);
        $this->setIfExists('zip_quality', $data ?? [], null);
        $this->setIfExists('zip_sign', $data ?? [], null);
        $this->setIfExists('is_revision', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('exif_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path 创建文件: 上传后使用的文件绝对路径，需要urlencode，需要与预上传precreate接口中的path保持一致; 创建文件夹: 创建文件夹的绝对路径，需要urlencode
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size 文件或目录的大小，必须要和文件真实大小保持一致，需要与预上传precreate接口中的size保持一致
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets isdir
     *
     * @return string|null
     */
    public function getIsdir()
    {
        return $this->container['isdir'];
    }

    /**
     * Sets isdir
     *
     * @param string|null $isdir 创建文件: 是否目录，0 文件、1 目录，需要与预上传precreate接口中的isdir保持一致; 创建文件夹: 本接口固定为1
     *
     * @return self
     */
    public function setIsdir($isdir)
    {
        if (is_null($isdir)) {
            throw new \InvalidArgumentException('non-nullable isdir cannot be null');
        }
        $this->container['isdir'] = $isdir;

        return $this;
    }

    /**
     * Gets block_list
     *
     * @return string[]|null
     */
    public function getBlockList()
    {
        return $this->container['block_list'];
    }

    /**
     * Sets block_list
     *
     * @param string[]|null $block_list 文件各分片md5数组的json串需要与预上传precreate接口中的block_list保持一致，同时对应分片上传superfile2接口返回的md5，且要按照序号顺序排列，组成md5数组的json串。
     *
     * @return self
     */
    public function setBlockList($block_list)
    {
        if (is_null($block_list)) {
            throw new \InvalidArgumentException('non-nullable block_list cannot be null');
        }
        $this->container['block_list'] = $block_list;

        return $this;
    }

    /**
     * Gets uploadid
     *
     * @return string|null
     */
    public function getUploadid()
    {
        return $this->container['uploadid'];
    }

    /**
     * Sets uploadid
     *
     * @param string|null $uploadid 预上传precreate接口下发的uploadid
     *
     * @return self
     */
    public function setUploadid($uploadid)
    {
        if (is_null($uploadid)) {
            throw new \InvalidArgumentException('non-nullable uploadid cannot be null');
        }
        $this->container['uploadid'] = $uploadid;

        return $this;
    }

    /**
     * Gets rtype
     *
     * @return int|null
     */
    public function getRtype()
    {
        return $this->container['rtype'];
    }

    /**
     * Sets rtype
     *
     * @param int|null $rtype 文件命名策略，默认00 为不重命名，返回冲突1 为只要path冲突即重命名2 为path冲突且block_list不同才重命名3 为覆盖，需要与预上传precreate接口中的rtype保持一致
     *
     * @return self
     */
    public function setRtype($rtype)
    {
        if (is_null($rtype)) {
            throw new \InvalidArgumentException('non-nullable rtype cannot be null');
        }
        $this->container['rtype'] = $rtype;

        return $this;
    }

    /**
     * Gets local_ctime
     *
     * @return int|null
     */
    public function getLocalCtime()
    {
        return $this->container['local_ctime'];
    }

    /**
     * Sets local_ctime
     *
     * @param int|null $local_ctime 客户端创建时间(精确到秒)，默认为当前时间戳
     *
     * @return self
     */
    public function setLocalCtime($local_ctime)
    {
        if (is_null($local_ctime)) {
            throw new \InvalidArgumentException('non-nullable local_ctime cannot be null');
        }
        $this->container['local_ctime'] = $local_ctime;

        return $this;
    }

    /**
     * Gets local_mtime
     *
     * @return int|null
     */
    public function getLocalMtime()
    {
        return $this->container['local_mtime'];
    }

    /**
     * Sets local_mtime
     *
     * @param int|null $local_mtime 客户端修改时间(精确到秒)，默认为当前时间戳
     *
     * @return self
     */
    public function setLocalMtime($local_mtime)
    {
        if (is_null($local_mtime)) {
            throw new \InvalidArgumentException('non-nullable local_mtime cannot be null');
        }
        $this->container['local_mtime'] = $local_mtime;

        return $this;
    }

    /**
     * Gets zip_quality
     *
     * @return int|null
     */
    public function getZipQuality()
    {
        return $this->container['zip_quality'];
    }

    /**
     * Sets zip_quality
     *
     * @param int|null $zip_quality 图片压缩程度，有效值50、70、100
     *
     * @return self
     */
    public function setZipQuality($zip_quality)
    {
        if (is_null($zip_quality)) {
            throw new \InvalidArgumentException('non-nullable zip_quality cannot be null');
        }
        $this->container['zip_quality'] = $zip_quality;

        return $this;
    }

    /**
     * Gets zip_sign
     *
     * @return int|null
     */
    public function getZipSign()
    {
        return $this->container['zip_sign'];
    }

    /**
     * Sets zip_sign
     *
     * @param int|null $zip_sign 未压缩原始图片文件真实md5
     *
     * @return self
     */
    public function setZipSign($zip_sign)
    {
        if (is_null($zip_sign)) {
            throw new \InvalidArgumentException('non-nullable zip_sign cannot be null');
        }
        $this->container['zip_sign'] = $zip_sign;

        return $this;
    }

    /**
     * Gets is_revision
     *
     * @return int|null
     */
    public function getIsRevision()
    {
        return $this->container['is_revision'];
    }

    /**
     * Sets is_revision
     *
     * @param int|null $is_revision 是否需要多版本支持1为支持，0为不支持， 默认为0 (带此参数会忽略重命名策略)
     *
     * @return self
     */
    public function setIsRevision($is_revision)
    {
        if (is_null($is_revision)) {
            throw new \InvalidArgumentException('non-nullable is_revision cannot be null');
        }
        $this->container['is_revision'] = $is_revision;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return int|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param int|null $mode 上传方式1 手动、2 批量上传、3 文件自动备份4 相册自动备份、5 视频自动备份
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets exif_info
     *
     * @return string|null
     */
    public function getExifInfo()
    {
        return $this->container['exif_info'];
    }

    /**
     * Sets exif_info
     *
     * @param string|null $exif_info json字符串，orientation、width、height、recovery为必传字段，其他字段如果没有可以不传
     *
     * @return self
     */
    public function setExifInfo($exif_info)
    {
        if (is_null($exif_info)) {
            throw new \InvalidArgumentException('non-nullable exif_info cannot be null');
        }
        $this->container['exif_info'] = $exif_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


