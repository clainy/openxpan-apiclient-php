<?php
/**
 * DefaultApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Clainy\OpenxpanApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * XPan NAS API
 *
 * API for accessing XPan NAS data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Clainy\OpenxpanApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Clainy\OpenxpanApiClient\ApiException;
use Clainy\OpenxpanApiClient\Configuration;
use Clainy\OpenxpanApiClient\HeaderSelector;
use Clainy\OpenxpanApiClient\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Clainy\OpenxpanApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiCategoryinfo' => [
            'application/json',
        ],
        'apiQuota' => [
            'application/json',
        ],
        'pcsSuperfile2Upload' => [
            'application/json',
        ],
        'xpanFileBtlist' => [
            'application/json',
        ],
        'xpanFileCreate' => [
            'application/json',
        ],
        'xpanFileDoclist' => [
            'application/json',
        ],
        'xpanFileFilemanager' => [
            'application/json',
        ],
        'xpanFileImagelist' => [
            'application/json',
        ],
        'xpanFileList' => [
            'application/json',
        ],
        'xpanFilePrecreate' => [
            'application/json',
        ],
        'xpanFileSearch' => [
            'application/json',
        ],
        'xpanFileVideolist' => [
            'application/json',
        ],
        'xpanMultimediaCategorylist' => [
            'application/json',
        ],
        'xpanMultimediaFilemetas' => [
            'application/json',
        ],
        'xpanMultimediaListall' => [
            'application/json',
        ],
        'xpanNasUinfo' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiCategoryinfo
     *
     * 获取分类文件总个数
     *
     * @param  string $parent_path 目录名称，为空时，parent_path &#x3D; \&quot;/\&quot; &amp;&amp; recursion &#x3D; 1 (required)
     * @param  int $recursion 是否递归，0 不递归、1 递归，默认0 (required)
     * @param  int $category 文件类型，1 视频、2 音频、3 图片、4 文档、5 应用、6 其他、7 种子 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiCategoryinfo'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\ApiCategoryinfo200Response
     */
    public function apiCategoryinfo($parent_path, $recursion, $category = null, string $contentType = self::contentTypes['apiCategoryinfo'][0])
    {
        list($response) = $this->apiCategoryinfoWithHttpInfo($parent_path, $recursion, $category, $contentType);
        return $response;
    }

    /**
     * Operation apiCategoryinfoWithHttpInfo
     *
     * 获取分类文件总个数
     *
     * @param  string $parent_path 目录名称，为空时，parent_path &#x3D; \&quot;/\&quot; &amp;&amp; recursion &#x3D; 1 (required)
     * @param  int $recursion 是否递归，0 不递归、1 递归，默认0 (required)
     * @param  int $category 文件类型，1 视频、2 音频、3 图片、4 文档、5 应用、6 其他、7 种子 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiCategoryinfo'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\ApiCategoryinfo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCategoryinfoWithHttpInfo($parent_path, $recursion, $category = null, string $contentType = self::contentTypes['apiCategoryinfo'][0])
    {
        $request = $this->apiCategoryinfoRequest($parent_path, $recursion, $category, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\ApiCategoryinfo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\ApiCategoryinfo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\ApiCategoryinfo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\ApiCategoryinfo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\ApiCategoryinfo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiCategoryinfoAsync
     *
     * 获取分类文件总个数
     *
     * @param  string $parent_path 目录名称，为空时，parent_path &#x3D; \&quot;/\&quot; &amp;&amp; recursion &#x3D; 1 (required)
     * @param  int $recursion 是否递归，0 不递归、1 递归，默认0 (required)
     * @param  int $category 文件类型，1 视频、2 音频、3 图片、4 文档、5 应用、6 其他、7 种子 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiCategoryinfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCategoryinfoAsync($parent_path, $recursion, $category = null, string $contentType = self::contentTypes['apiCategoryinfo'][0])
    {
        return $this->apiCategoryinfoAsyncWithHttpInfo($parent_path, $recursion, $category, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCategoryinfoAsyncWithHttpInfo
     *
     * 获取分类文件总个数
     *
     * @param  string $parent_path 目录名称，为空时，parent_path &#x3D; \&quot;/\&quot; &amp;&amp; recursion &#x3D; 1 (required)
     * @param  int $recursion 是否递归，0 不递归、1 递归，默认0 (required)
     * @param  int $category 文件类型，1 视频、2 音频、3 图片、4 文档、5 应用、6 其他、7 种子 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiCategoryinfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCategoryinfoAsyncWithHttpInfo($parent_path, $recursion, $category = null, string $contentType = self::contentTypes['apiCategoryinfo'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\ApiCategoryinfo200Response';
        $request = $this->apiCategoryinfoRequest($parent_path, $recursion, $category, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiCategoryinfo'
     *
     * @param  string $parent_path 目录名称，为空时，parent_path &#x3D; \&quot;/\&quot; &amp;&amp; recursion &#x3D; 1 (required)
     * @param  int $recursion 是否递归，0 不递归、1 递归，默认0 (required)
     * @param  int $category 文件类型，1 视频、2 音频、3 图片、4 文档、5 应用、6 其他、7 种子 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiCategoryinfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiCategoryinfoRequest($parent_path, $recursion, $category = null, string $contentType = self::contentTypes['apiCategoryinfo'][0])
    {

        // verify the required parameter 'parent_path' is set
        if ($parent_path === null || (is_array($parent_path) && count($parent_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent_path when calling apiCategoryinfo'
            );
        }

        // verify the required parameter 'recursion' is set
        if ($recursion === null || (is_array($recursion) && count($recursion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recursion when calling apiCategoryinfo'
            );
        }



        $resourcePath = '/api/categoryinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category,
            'category', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_path,
            'parent_path', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recursion,
            'recursion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiQuota
     *
     * 获取网盘容量信息
     *
     * @param  int $checkfree 是否检查免费信息，0为不查，1为查，默认为0 (required)
     * @param  int $checkexpire 是否检查过期信息，0为不查，1为查，默认为0 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiQuota'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\ApiQuota200Response
     */
    public function apiQuota($checkfree, $checkexpire, string $contentType = self::contentTypes['apiQuota'][0])
    {
        list($response) = $this->apiQuotaWithHttpInfo($checkfree, $checkexpire, $contentType);
        return $response;
    }

    /**
     * Operation apiQuotaWithHttpInfo
     *
     * 获取网盘容量信息
     *
     * @param  int $checkfree 是否检查免费信息，0为不查，1为查，默认为0 (required)
     * @param  int $checkexpire 是否检查过期信息，0为不查，1为查，默认为0 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiQuota'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\ApiQuota200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiQuotaWithHttpInfo($checkfree, $checkexpire, string $contentType = self::contentTypes['apiQuota'][0])
    {
        $request = $this->apiQuotaRequest($checkfree, $checkexpire, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\ApiQuota200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\ApiQuota200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\ApiQuota200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\ApiQuota200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\ApiQuota200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiQuotaAsync
     *
     * 获取网盘容量信息
     *
     * @param  int $checkfree 是否检查免费信息，0为不查，1为查，默认为0 (required)
     * @param  int $checkexpire 是否检查过期信息，0为不查，1为查，默认为0 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiQuota'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiQuotaAsync($checkfree, $checkexpire, string $contentType = self::contentTypes['apiQuota'][0])
    {
        return $this->apiQuotaAsyncWithHttpInfo($checkfree, $checkexpire, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiQuotaAsyncWithHttpInfo
     *
     * 获取网盘容量信息
     *
     * @param  int $checkfree 是否检查免费信息，0为不查，1为查，默认为0 (required)
     * @param  int $checkexpire 是否检查过期信息，0为不查，1为查，默认为0 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiQuota'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiQuotaAsyncWithHttpInfo($checkfree, $checkexpire, string $contentType = self::contentTypes['apiQuota'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\ApiQuota200Response';
        $request = $this->apiQuotaRequest($checkfree, $checkexpire, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiQuota'
     *
     * @param  int $checkfree 是否检查免费信息，0为不查，1为查，默认为0 (required)
     * @param  int $checkexpire 是否检查过期信息，0为不查，1为查，默认为0 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiQuota'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiQuotaRequest($checkfree, $checkexpire, string $contentType = self::contentTypes['apiQuota'][0])
    {

        // verify the required parameter 'checkfree' is set
        if ($checkfree === null || (is_array($checkfree) && count($checkfree) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkfree when calling apiQuota'
            );
        }

        // verify the required parameter 'checkexpire' is set
        if ($checkexpire === null || (is_array($checkexpire) && count($checkexpire) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkexpire when calling apiQuota'
            );
        }


        $resourcePath = '/api/quota';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $checkfree,
            'checkfree', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $checkexpire,
            'checkexpire', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pcsSuperfile2Upload
     *
     * 分片上传
     *
     * @param  string $type 固定值 tmpfile (optional)
     * @param  string $path 上传后使用的文件绝对路径，需要urlencode，需要与上一个阶段预上传precreate接口中的path保持一致 (optional)
     * @param  string $uploadid 上一个阶段预上传precreate接口下发的uploadid (optional)
     * @param  int $partseq 文件分片的位置序号，从0开始，参考上一个阶段预上传precreate接口返回的block_list (optional)
     * @param  \Clainy\OpenxpanApiClient\Model\PostPcsSuperfile2Upload $post_pcs_superfile2_upload post_pcs_superfile2_upload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pcsSuperfile2Upload'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\PcsSuperfile2Upload200Response
     */
    public function pcsSuperfile2Upload($type = null, $path = null, $uploadid = null, $partseq = null, $post_pcs_superfile2_upload = null, string $contentType = self::contentTypes['pcsSuperfile2Upload'][0])
    {
        list($response) = $this->pcsSuperfile2UploadWithHttpInfo($type, $path, $uploadid, $partseq, $post_pcs_superfile2_upload, $contentType);
        return $response;
    }

    /**
     * Operation pcsSuperfile2UploadWithHttpInfo
     *
     * 分片上传
     *
     * @param  string $type 固定值 tmpfile (optional)
     * @param  string $path 上传后使用的文件绝对路径，需要urlencode，需要与上一个阶段预上传precreate接口中的path保持一致 (optional)
     * @param  string $uploadid 上一个阶段预上传precreate接口下发的uploadid (optional)
     * @param  int $partseq 文件分片的位置序号，从0开始，参考上一个阶段预上传precreate接口返回的block_list (optional)
     * @param  \Clainy\OpenxpanApiClient\Model\PostPcsSuperfile2Upload $post_pcs_superfile2_upload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pcsSuperfile2Upload'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\PcsSuperfile2Upload200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function pcsSuperfile2UploadWithHttpInfo($type = null, $path = null, $uploadid = null, $partseq = null, $post_pcs_superfile2_upload = null, string $contentType = self::contentTypes['pcsSuperfile2Upload'][0])
    {
        $request = $this->pcsSuperfile2UploadRequest($type, $path, $uploadid, $partseq, $post_pcs_superfile2_upload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\PcsSuperfile2Upload200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\PcsSuperfile2Upload200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\PcsSuperfile2Upload200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\PcsSuperfile2Upload200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\PcsSuperfile2Upload200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pcsSuperfile2UploadAsync
     *
     * 分片上传
     *
     * @param  string $type 固定值 tmpfile (optional)
     * @param  string $path 上传后使用的文件绝对路径，需要urlencode，需要与上一个阶段预上传precreate接口中的path保持一致 (optional)
     * @param  string $uploadid 上一个阶段预上传precreate接口下发的uploadid (optional)
     * @param  int $partseq 文件分片的位置序号，从0开始，参考上一个阶段预上传precreate接口返回的block_list (optional)
     * @param  \Clainy\OpenxpanApiClient\Model\PostPcsSuperfile2Upload $post_pcs_superfile2_upload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pcsSuperfile2Upload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pcsSuperfile2UploadAsync($type = null, $path = null, $uploadid = null, $partseq = null, $post_pcs_superfile2_upload = null, string $contentType = self::contentTypes['pcsSuperfile2Upload'][0])
    {
        return $this->pcsSuperfile2UploadAsyncWithHttpInfo($type, $path, $uploadid, $partseq, $post_pcs_superfile2_upload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pcsSuperfile2UploadAsyncWithHttpInfo
     *
     * 分片上传
     *
     * @param  string $type 固定值 tmpfile (optional)
     * @param  string $path 上传后使用的文件绝对路径，需要urlencode，需要与上一个阶段预上传precreate接口中的path保持一致 (optional)
     * @param  string $uploadid 上一个阶段预上传precreate接口下发的uploadid (optional)
     * @param  int $partseq 文件分片的位置序号，从0开始，参考上一个阶段预上传precreate接口返回的block_list (optional)
     * @param  \Clainy\OpenxpanApiClient\Model\PostPcsSuperfile2Upload $post_pcs_superfile2_upload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pcsSuperfile2Upload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pcsSuperfile2UploadAsyncWithHttpInfo($type = null, $path = null, $uploadid = null, $partseq = null, $post_pcs_superfile2_upload = null, string $contentType = self::contentTypes['pcsSuperfile2Upload'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\PcsSuperfile2Upload200Response';
        $request = $this->pcsSuperfile2UploadRequest($type, $path, $uploadid, $partseq, $post_pcs_superfile2_upload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pcsSuperfile2Upload'
     *
     * @param  string $type 固定值 tmpfile (optional)
     * @param  string $path 上传后使用的文件绝对路径，需要urlencode，需要与上一个阶段预上传precreate接口中的path保持一致 (optional)
     * @param  string $uploadid 上一个阶段预上传precreate接口下发的uploadid (optional)
     * @param  int $partseq 文件分片的位置序号，从0开始，参考上一个阶段预上传precreate接口返回的block_list (optional)
     * @param  \Clainy\OpenxpanApiClient\Model\PostPcsSuperfile2Upload $post_pcs_superfile2_upload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pcsSuperfile2Upload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pcsSuperfile2UploadRequest($type = null, $path = null, $uploadid = null, $partseq = null, $post_pcs_superfile2_upload = null, string $contentType = self::contentTypes['pcsSuperfile2Upload'][0])
    {







        $resourcePath = '/rest/2.0/pcs/superfile2?method=upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path,
            'path', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $uploadid,
            'uploadid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $partseq,
            'partseq', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_pcs_superfile2_upload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_pcs_superfile2_upload));
            } else {
                $httpBody = $post_pcs_superfile2_upload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xpanFileBtlist
     *
     * 获取bt列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果。如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 每页返回的文件数， 默认值为1000, 最大值建议不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的bt文件 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileBtlist'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response
     */
    public function xpanFileBtlist($parent_path, $page, $num, $order, $desc, $recursion, string $contentType = self::contentTypes['xpanFileBtlist'][0])
    {
        list($response) = $this->xpanFileBtlistWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, $contentType);
        return $response;
    }

    /**
     * Operation xpanFileBtlistWithHttpInfo
     *
     * 获取bt列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果。如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 每页返回的文件数， 默认值为1000, 最大值建议不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的bt文件 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileBtlist'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function xpanFileBtlistWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, string $contentType = self::contentTypes['xpanFileBtlist'][0])
    {
        $request = $this->xpanFileBtlistRequest($parent_path, $page, $num, $order, $desc, $recursion, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xpanFileBtlistAsync
     *
     * 获取bt列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果。如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 每页返回的文件数， 默认值为1000, 最大值建议不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的bt文件 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileBtlist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileBtlistAsync($parent_path, $page, $num, $order, $desc, $recursion, string $contentType = self::contentTypes['xpanFileBtlist'][0])
    {
        return $this->xpanFileBtlistAsyncWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xpanFileBtlistAsyncWithHttpInfo
     *
     * 获取bt列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果。如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 每页返回的文件数， 默认值为1000, 最大值建议不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的bt文件 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileBtlist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileBtlistAsyncWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, string $contentType = self::contentTypes['xpanFileBtlist'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response';
        $request = $this->xpanFileBtlistRequest($parent_path, $page, $num, $order, $desc, $recursion, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xpanFileBtlist'
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果。如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 每页返回的文件数， 默认值为1000, 最大值建议不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的bt文件 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileBtlist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function xpanFileBtlistRequest($parent_path, $page, $num, $order, $desc, $recursion, string $contentType = self::contentTypes['xpanFileBtlist'][0])
    {

        // verify the required parameter 'parent_path' is set
        if ($parent_path === null || (is_array($parent_path) && count($parent_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent_path when calling xpanFileBtlist'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling xpanFileBtlist'
            );
        }

        // verify the required parameter 'num' is set
        if ($num === null || (is_array($num) && count($num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $num when calling xpanFileBtlist'
            );
        }

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order when calling xpanFileBtlist'
            );
        }

        // verify the required parameter 'desc' is set
        if ($desc === null || (is_array($desc) && count($desc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $desc when calling xpanFileBtlist'
            );
        }

        // verify the required parameter 'recursion' is set
        if ($recursion === null || (is_array($recursion) && count($recursion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recursion when calling xpanFileBtlist'
            );
        }


        $resourcePath = '/rest/2.0/xpan/file?method=btlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_path,
            'parent_path', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $num,
            'num', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $desc,
            'desc', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recursion,
            'recursion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xpanFileCreate
     *
     * 创建文件, 创建文件夹
     *
     * @param  \Clainy\OpenxpanApiClient\Model\PostXpanFileCreate $post_xpan_file_create post_xpan_file_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileCreate'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\XpanFileCreate200Response
     */
    public function xpanFileCreate($post_xpan_file_create = null, string $contentType = self::contentTypes['xpanFileCreate'][0])
    {
        list($response) = $this->xpanFileCreateWithHttpInfo($post_xpan_file_create, $contentType);
        return $response;
    }

    /**
     * Operation xpanFileCreateWithHttpInfo
     *
     * 创建文件, 创建文件夹
     *
     * @param  \Clainy\OpenxpanApiClient\Model\PostXpanFileCreate $post_xpan_file_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileCreate'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\XpanFileCreate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function xpanFileCreateWithHttpInfo($post_xpan_file_create = null, string $contentType = self::contentTypes['xpanFileCreate'][0])
    {
        $request = $this->xpanFileCreateRequest($post_xpan_file_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\XpanFileCreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\XpanFileCreate200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\XpanFileCreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileCreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\XpanFileCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xpanFileCreateAsync
     *
     * 创建文件, 创建文件夹
     *
     * @param  \Clainy\OpenxpanApiClient\Model\PostXpanFileCreate $post_xpan_file_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileCreateAsync($post_xpan_file_create = null, string $contentType = self::contentTypes['xpanFileCreate'][0])
    {
        return $this->xpanFileCreateAsyncWithHttpInfo($post_xpan_file_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xpanFileCreateAsyncWithHttpInfo
     *
     * 创建文件, 创建文件夹
     *
     * @param  \Clainy\OpenxpanApiClient\Model\PostXpanFileCreate $post_xpan_file_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileCreateAsyncWithHttpInfo($post_xpan_file_create = null, string $contentType = self::contentTypes['xpanFileCreate'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileCreate200Response';
        $request = $this->xpanFileCreateRequest($post_xpan_file_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xpanFileCreate'
     *
     * @param  \Clainy\OpenxpanApiClient\Model\PostXpanFileCreate $post_xpan_file_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function xpanFileCreateRequest($post_xpan_file_create = null, string $contentType = self::contentTypes['xpanFileCreate'][0])
    {



        $resourcePath = '/rest/2.0/xpan/file?method=create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_xpan_file_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_xpan_file_create));
            } else {
                $httpBody = $post_xpan_file_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xpanFileDoclist
     *
     * 获取文档列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码。 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果。如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 一页返回的文档数， 默认值为1000，建议最大值不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的文档 (required)
     * @param  int $web 为1时返回文档预览地址lodocpreview (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileDoclist'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response
     */
    public function xpanFileDoclist($parent_path, $page, $num, $order, $desc, $recursion, $web, string $contentType = self::contentTypes['xpanFileDoclist'][0])
    {
        list($response) = $this->xpanFileDoclistWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, $web, $contentType);
        return $response;
    }

    /**
     * Operation xpanFileDoclistWithHttpInfo
     *
     * 获取文档列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码。 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果。如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 一页返回的文档数， 默认值为1000，建议最大值不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的文档 (required)
     * @param  int $web 为1时返回文档预览地址lodocpreview (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileDoclist'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function xpanFileDoclistWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, $web, string $contentType = self::contentTypes['xpanFileDoclist'][0])
    {
        $request = $this->xpanFileDoclistRequest($parent_path, $page, $num, $order, $desc, $recursion, $web, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xpanFileDoclistAsync
     *
     * 获取文档列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码。 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果。如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 一页返回的文档数， 默认值为1000，建议最大值不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的文档 (required)
     * @param  int $web 为1时返回文档预览地址lodocpreview (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileDoclist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileDoclistAsync($parent_path, $page, $num, $order, $desc, $recursion, $web, string $contentType = self::contentTypes['xpanFileDoclist'][0])
    {
        return $this->xpanFileDoclistAsyncWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, $web, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xpanFileDoclistAsyncWithHttpInfo
     *
     * 获取文档列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码。 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果。如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 一页返回的文档数， 默认值为1000，建议最大值不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的文档 (required)
     * @param  int $web 为1时返回文档预览地址lodocpreview (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileDoclist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileDoclistAsyncWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, $web, string $contentType = self::contentTypes['xpanFileDoclist'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response';
        $request = $this->xpanFileDoclistRequest($parent_path, $page, $num, $order, $desc, $recursion, $web, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xpanFileDoclist'
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码。 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果。如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 一页返回的文档数， 默认值为1000，建议最大值不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的文档 (required)
     * @param  int $web 为1时返回文档预览地址lodocpreview (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileDoclist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function xpanFileDoclistRequest($parent_path, $page, $num, $order, $desc, $recursion, $web, string $contentType = self::contentTypes['xpanFileDoclist'][0])
    {

        // verify the required parameter 'parent_path' is set
        if ($parent_path === null || (is_array($parent_path) && count($parent_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent_path when calling xpanFileDoclist'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling xpanFileDoclist'
            );
        }

        // verify the required parameter 'num' is set
        if ($num === null || (is_array($num) && count($num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $num when calling xpanFileDoclist'
            );
        }

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order when calling xpanFileDoclist'
            );
        }

        // verify the required parameter 'desc' is set
        if ($desc === null || (is_array($desc) && count($desc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $desc when calling xpanFileDoclist'
            );
        }

        // verify the required parameter 'recursion' is set
        if ($recursion === null || (is_array($recursion) && count($recursion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recursion when calling xpanFileDoclist'
            );
        }

        // verify the required parameter 'web' is set
        if ($web === null || (is_array($web) && count($web) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $web when calling xpanFileDoclist'
            );
        }


        $resourcePath = '/rest/2.0/xpan/file?method=doclist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_path,
            'parent_path', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $num,
            'num', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $desc,
            'desc', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recursion,
            'recursion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $web,
            'web', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xpanFileFilemanager
     *
     * 管理文件
     *
     * @param  string $opera 文件操作参数，可实现文件复制、移动、重命名、删除，依次对应的参数值为：copy、move、rename、delete (optional)
     * @param  \Clainy\OpenxpanApiClient\Model\PostXpanFileFilemanager $post_xpan_file_filemanager post_xpan_file_filemanager (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileFilemanager'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\XpanFileFilemanager200Response
     */
    public function xpanFileFilemanager($opera = null, $post_xpan_file_filemanager = null, string $contentType = self::contentTypes['xpanFileFilemanager'][0])
    {
        list($response) = $this->xpanFileFilemanagerWithHttpInfo($opera, $post_xpan_file_filemanager, $contentType);
        return $response;
    }

    /**
     * Operation xpanFileFilemanagerWithHttpInfo
     *
     * 管理文件
     *
     * @param  string $opera 文件操作参数，可实现文件复制、移动、重命名、删除，依次对应的参数值为：copy、move、rename、delete (optional)
     * @param  \Clainy\OpenxpanApiClient\Model\PostXpanFileFilemanager $post_xpan_file_filemanager (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileFilemanager'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\XpanFileFilemanager200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function xpanFileFilemanagerWithHttpInfo($opera = null, $post_xpan_file_filemanager = null, string $contentType = self::contentTypes['xpanFileFilemanager'][0])
    {
        $request = $this->xpanFileFilemanagerRequest($opera, $post_xpan_file_filemanager, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\XpanFileFilemanager200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\XpanFileFilemanager200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\XpanFileFilemanager200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileFilemanager200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\XpanFileFilemanager200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xpanFileFilemanagerAsync
     *
     * 管理文件
     *
     * @param  string $opera 文件操作参数，可实现文件复制、移动、重命名、删除，依次对应的参数值为：copy、move、rename、delete (optional)
     * @param  \Clainy\OpenxpanApiClient\Model\PostXpanFileFilemanager $post_xpan_file_filemanager (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileFilemanager'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileFilemanagerAsync($opera = null, $post_xpan_file_filemanager = null, string $contentType = self::contentTypes['xpanFileFilemanager'][0])
    {
        return $this->xpanFileFilemanagerAsyncWithHttpInfo($opera, $post_xpan_file_filemanager, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xpanFileFilemanagerAsyncWithHttpInfo
     *
     * 管理文件
     *
     * @param  string $opera 文件操作参数，可实现文件复制、移动、重命名、删除，依次对应的参数值为：copy、move、rename、delete (optional)
     * @param  \Clainy\OpenxpanApiClient\Model\PostXpanFileFilemanager $post_xpan_file_filemanager (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileFilemanager'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileFilemanagerAsyncWithHttpInfo($opera = null, $post_xpan_file_filemanager = null, string $contentType = self::contentTypes['xpanFileFilemanager'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileFilemanager200Response';
        $request = $this->xpanFileFilemanagerRequest($opera, $post_xpan_file_filemanager, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xpanFileFilemanager'
     *
     * @param  string $opera 文件操作参数，可实现文件复制、移动、重命名、删除，依次对应的参数值为：copy、move、rename、delete (optional)
     * @param  \Clainy\OpenxpanApiClient\Model\PostXpanFileFilemanager $post_xpan_file_filemanager (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileFilemanager'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function xpanFileFilemanagerRequest($opera = null, $post_xpan_file_filemanager = null, string $contentType = self::contentTypes['xpanFileFilemanager'][0])
    {




        $resourcePath = '/rest/2.0/xpan/file?method=filemanager';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $opera,
            'opera', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_xpan_file_filemanager)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_xpan_file_filemanager));
            } else {
                $httpBody = $post_xpan_file_filemanager;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xpanFileImagelist
     *
     * 获取图片列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果 如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 一页返回的图片数，默认值为1000，建议最大值不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的图片 (required)
     * @param  int $web 为1时返回图片缩略图 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileImagelist'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response
     */
    public function xpanFileImagelist($parent_path, $page, $num, $order, $desc, $recursion, $web, string $contentType = self::contentTypes['xpanFileImagelist'][0])
    {
        list($response) = $this->xpanFileImagelistWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, $web, $contentType);
        return $response;
    }

    /**
     * Operation xpanFileImagelistWithHttpInfo
     *
     * 获取图片列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果 如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 一页返回的图片数，默认值为1000，建议最大值不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的图片 (required)
     * @param  int $web 为1时返回图片缩略图 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileImagelist'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function xpanFileImagelistWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, $web, string $contentType = self::contentTypes['xpanFileImagelist'][0])
    {
        $request = $this->xpanFileImagelistRequest($parent_path, $page, $num, $order, $desc, $recursion, $web, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xpanFileImagelistAsync
     *
     * 获取图片列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果 如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 一页返回的图片数，默认值为1000，建议最大值不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的图片 (required)
     * @param  int $web 为1时返回图片缩略图 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileImagelist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileImagelistAsync($parent_path, $page, $num, $order, $desc, $recursion, $web, string $contentType = self::contentTypes['xpanFileImagelist'][0])
    {
        return $this->xpanFileImagelistAsyncWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, $web, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xpanFileImagelistAsyncWithHttpInfo
     *
     * 获取图片列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果 如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 一页返回的图片数，默认值为1000，建议最大值不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的图片 (required)
     * @param  int $web 为1时返回图片缩略图 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileImagelist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileImagelistAsyncWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, $web, string $contentType = self::contentTypes['xpanFileImagelist'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response';
        $request = $this->xpanFileImagelistRequest($parent_path, $page, $num, $order, $desc, $recursion, $web, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xpanFileImagelist'
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果 如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 一页返回的图片数，默认值为1000，建议最大值不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的图片 (required)
     * @param  int $web 为1时返回图片缩略图 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileImagelist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function xpanFileImagelistRequest($parent_path, $page, $num, $order, $desc, $recursion, $web, string $contentType = self::contentTypes['xpanFileImagelist'][0])
    {

        // verify the required parameter 'parent_path' is set
        if ($parent_path === null || (is_array($parent_path) && count($parent_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent_path when calling xpanFileImagelist'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling xpanFileImagelist'
            );
        }

        // verify the required parameter 'num' is set
        if ($num === null || (is_array($num) && count($num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $num when calling xpanFileImagelist'
            );
        }

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order when calling xpanFileImagelist'
            );
        }

        // verify the required parameter 'desc' is set
        if ($desc === null || (is_array($desc) && count($desc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $desc when calling xpanFileImagelist'
            );
        }

        // verify the required parameter 'recursion' is set
        if ($recursion === null || (is_array($recursion) && count($recursion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recursion when calling xpanFileImagelist'
            );
        }

        // verify the required parameter 'web' is set
        if ($web === null || (is_array($web) && count($web) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $web when calling xpanFileImagelist'
            );
        }


        $resourcePath = '/rest/2.0/xpan/file?method=imagelist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_path,
            'parent_path', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $num,
            'num', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $desc,
            'desc', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recursion,
            'recursion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $web,
            'web', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xpanFileList
     *
     * 获取文件列表
     *
     * @param  string $dir 需要list的目录，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  string $order 排序字段：默认为name；time表示先按文件类型排序，后按修改时间排序；name表示先按文件类型排序，后按文件名称排序；size表示先按文件类型排序，后按文件大小排序。 (required)
     * @param  int $desc 默认为升序，设置为1实现降序 （注：排序的对象是当前目录下所有文件，不是当前分页下的文件） (required)
     * @param  int $start 起始位置，从0开始 (required)
     * @param  int $limit 查询数目，默认为1000，建议最大不超过1000 (required)
     * @param  int $web 值为1时，返回dir_empty属性和缩略图数据 (required)
     * @param  int $folder 是否只返回文件夹，0 返回所有，1 只返回文件夹，且属性只返回path字段 (required)
     * @param  int $showempty 是否返回dir_empty属性，0 不返回，1 返回 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileList'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\XpanFileList200Response
     */
    public function xpanFileList($dir, $order, $desc, $start, $limit, $web, $folder, $showempty, string $contentType = self::contentTypes['xpanFileList'][0])
    {
        list($response) = $this->xpanFileListWithHttpInfo($dir, $order, $desc, $start, $limit, $web, $folder, $showempty, $contentType);
        return $response;
    }

    /**
     * Operation xpanFileListWithHttpInfo
     *
     * 获取文件列表
     *
     * @param  string $dir 需要list的目录，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  string $order 排序字段：默认为name；time表示先按文件类型排序，后按修改时间排序；name表示先按文件类型排序，后按文件名称排序；size表示先按文件类型排序，后按文件大小排序。 (required)
     * @param  int $desc 默认为升序，设置为1实现降序 （注：排序的对象是当前目录下所有文件，不是当前分页下的文件） (required)
     * @param  int $start 起始位置，从0开始 (required)
     * @param  int $limit 查询数目，默认为1000，建议最大不超过1000 (required)
     * @param  int $web 值为1时，返回dir_empty属性和缩略图数据 (required)
     * @param  int $folder 是否只返回文件夹，0 返回所有，1 只返回文件夹，且属性只返回path字段 (required)
     * @param  int $showempty 是否返回dir_empty属性，0 不返回，1 返回 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileList'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\XpanFileList200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function xpanFileListWithHttpInfo($dir, $order, $desc, $start, $limit, $web, $folder, $showempty, string $contentType = self::contentTypes['xpanFileList'][0])
    {
        $request = $this->xpanFileListRequest($dir, $order, $desc, $start, $limit, $web, $folder, $showempty, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\XpanFileList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\XpanFileList200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\XpanFileList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\XpanFileList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xpanFileListAsync
     *
     * 获取文件列表
     *
     * @param  string $dir 需要list的目录，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  string $order 排序字段：默认为name；time表示先按文件类型排序，后按修改时间排序；name表示先按文件类型排序，后按文件名称排序；size表示先按文件类型排序，后按文件大小排序。 (required)
     * @param  int $desc 默认为升序，设置为1实现降序 （注：排序的对象是当前目录下所有文件，不是当前分页下的文件） (required)
     * @param  int $start 起始位置，从0开始 (required)
     * @param  int $limit 查询数目，默认为1000，建议最大不超过1000 (required)
     * @param  int $web 值为1时，返回dir_empty属性和缩略图数据 (required)
     * @param  int $folder 是否只返回文件夹，0 返回所有，1 只返回文件夹，且属性只返回path字段 (required)
     * @param  int $showempty 是否返回dir_empty属性，0 不返回，1 返回 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileListAsync($dir, $order, $desc, $start, $limit, $web, $folder, $showempty, string $contentType = self::contentTypes['xpanFileList'][0])
    {
        return $this->xpanFileListAsyncWithHttpInfo($dir, $order, $desc, $start, $limit, $web, $folder, $showempty, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xpanFileListAsyncWithHttpInfo
     *
     * 获取文件列表
     *
     * @param  string $dir 需要list的目录，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  string $order 排序字段：默认为name；time表示先按文件类型排序，后按修改时间排序；name表示先按文件类型排序，后按文件名称排序；size表示先按文件类型排序，后按文件大小排序。 (required)
     * @param  int $desc 默认为升序，设置为1实现降序 （注：排序的对象是当前目录下所有文件，不是当前分页下的文件） (required)
     * @param  int $start 起始位置，从0开始 (required)
     * @param  int $limit 查询数目，默认为1000，建议最大不超过1000 (required)
     * @param  int $web 值为1时，返回dir_empty属性和缩略图数据 (required)
     * @param  int $folder 是否只返回文件夹，0 返回所有，1 只返回文件夹，且属性只返回path字段 (required)
     * @param  int $showempty 是否返回dir_empty属性，0 不返回，1 返回 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileListAsyncWithHttpInfo($dir, $order, $desc, $start, $limit, $web, $folder, $showempty, string $contentType = self::contentTypes['xpanFileList'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileList200Response';
        $request = $this->xpanFileListRequest($dir, $order, $desc, $start, $limit, $web, $folder, $showempty, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xpanFileList'
     *
     * @param  string $dir 需要list的目录，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  string $order 排序字段：默认为name；time表示先按文件类型排序，后按修改时间排序；name表示先按文件类型排序，后按文件名称排序；size表示先按文件类型排序，后按文件大小排序。 (required)
     * @param  int $desc 默认为升序，设置为1实现降序 （注：排序的对象是当前目录下所有文件，不是当前分页下的文件） (required)
     * @param  int $start 起始位置，从0开始 (required)
     * @param  int $limit 查询数目，默认为1000，建议最大不超过1000 (required)
     * @param  int $web 值为1时，返回dir_empty属性和缩略图数据 (required)
     * @param  int $folder 是否只返回文件夹，0 返回所有，1 只返回文件夹，且属性只返回path字段 (required)
     * @param  int $showempty 是否返回dir_empty属性，0 不返回，1 返回 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function xpanFileListRequest($dir, $order, $desc, $start, $limit, $web, $folder, $showempty, string $contentType = self::contentTypes['xpanFileList'][0])
    {

        // verify the required parameter 'dir' is set
        if ($dir === null || (is_array($dir) && count($dir) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dir when calling xpanFileList'
            );
        }

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order when calling xpanFileList'
            );
        }

        // verify the required parameter 'desc' is set
        if ($desc === null || (is_array($desc) && count($desc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $desc when calling xpanFileList'
            );
        }

        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling xpanFileList'
            );
        }

        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling xpanFileList'
            );
        }

        // verify the required parameter 'web' is set
        if ($web === null || (is_array($web) && count($web) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $web when calling xpanFileList'
            );
        }

        // verify the required parameter 'folder' is set
        if ($folder === null || (is_array($folder) && count($folder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folder when calling xpanFileList'
            );
        }

        // verify the required parameter 'showempty' is set
        if ($showempty === null || (is_array($showempty) && count($showempty) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $showempty when calling xpanFileList'
            );
        }


        $resourcePath = '/rest/2.0/xpan/file?method=list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dir,
            'dir', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $desc,
            'desc', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $web,
            'web', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $folder,
            'folder', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $showempty,
            'showempty', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xpanFilePrecreate
     *
     * 预上传
     *
     * @param  \Clainy\OpenxpanApiClient\Model\PostXpanFilePrecreate $post_xpan_file_precreate post_xpan_file_precreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFilePrecreate'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\XpanFilePrecreate200Response
     */
    public function xpanFilePrecreate($post_xpan_file_precreate = null, string $contentType = self::contentTypes['xpanFilePrecreate'][0])
    {
        list($response) = $this->xpanFilePrecreateWithHttpInfo($post_xpan_file_precreate, $contentType);
        return $response;
    }

    /**
     * Operation xpanFilePrecreateWithHttpInfo
     *
     * 预上传
     *
     * @param  \Clainy\OpenxpanApiClient\Model\PostXpanFilePrecreate $post_xpan_file_precreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFilePrecreate'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\XpanFilePrecreate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function xpanFilePrecreateWithHttpInfo($post_xpan_file_precreate = null, string $contentType = self::contentTypes['xpanFilePrecreate'][0])
    {
        $request = $this->xpanFilePrecreateRequest($post_xpan_file_precreate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\XpanFilePrecreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\XpanFilePrecreate200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\XpanFilePrecreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFilePrecreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\XpanFilePrecreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xpanFilePrecreateAsync
     *
     * 预上传
     *
     * @param  \Clainy\OpenxpanApiClient\Model\PostXpanFilePrecreate $post_xpan_file_precreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFilePrecreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFilePrecreateAsync($post_xpan_file_precreate = null, string $contentType = self::contentTypes['xpanFilePrecreate'][0])
    {
        return $this->xpanFilePrecreateAsyncWithHttpInfo($post_xpan_file_precreate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xpanFilePrecreateAsyncWithHttpInfo
     *
     * 预上传
     *
     * @param  \Clainy\OpenxpanApiClient\Model\PostXpanFilePrecreate $post_xpan_file_precreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFilePrecreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFilePrecreateAsyncWithHttpInfo($post_xpan_file_precreate = null, string $contentType = self::contentTypes['xpanFilePrecreate'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFilePrecreate200Response';
        $request = $this->xpanFilePrecreateRequest($post_xpan_file_precreate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xpanFilePrecreate'
     *
     * @param  \Clainy\OpenxpanApiClient\Model\PostXpanFilePrecreate $post_xpan_file_precreate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFilePrecreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function xpanFilePrecreateRequest($post_xpan_file_precreate = null, string $contentType = self::contentTypes['xpanFilePrecreate'][0])
    {



        $resourcePath = '/rest/2.0/xpan/file?method=precreate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_xpan_file_precreate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_xpan_file_precreate));
            } else {
                $httpBody = $post_xpan_file_precreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xpanFileSearch
     *
     * 搜索文件
     *
     * @param  string $dir 搜索目录，默认根目录 (required)
     * @param  int $page 页数，从1开始，缺省则返回所有条目 (required)
     * @param  int $num 默认为500，不能修改 (required)
     * @param  int $recursion 是否递归搜索子目录 1:是，0:否（默认） (required)
     * @param  int $web 默认0，为1时返回缩略图信息 (required)
     * @param  string $device_id 设备ID，设备注册接口下发，硬件设备必传 (required)
     * @param  string $key 搜索关键字，最大30字符（UTF8格式） (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileSearch'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\XpanFileSearch200Response
     */
    public function xpanFileSearch($dir, $page, $num, $recursion, $web, $device_id, $key = null, string $contentType = self::contentTypes['xpanFileSearch'][0])
    {
        list($response) = $this->xpanFileSearchWithHttpInfo($dir, $page, $num, $recursion, $web, $device_id, $key, $contentType);
        return $response;
    }

    /**
     * Operation xpanFileSearchWithHttpInfo
     *
     * 搜索文件
     *
     * @param  string $dir 搜索目录，默认根目录 (required)
     * @param  int $page 页数，从1开始，缺省则返回所有条目 (required)
     * @param  int $num 默认为500，不能修改 (required)
     * @param  int $recursion 是否递归搜索子目录 1:是，0:否（默认） (required)
     * @param  int $web 默认0，为1时返回缩略图信息 (required)
     * @param  string $device_id 设备ID，设备注册接口下发，硬件设备必传 (required)
     * @param  string $key 搜索关键字，最大30字符（UTF8格式） (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileSearch'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\XpanFileSearch200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function xpanFileSearchWithHttpInfo($dir, $page, $num, $recursion, $web, $device_id, $key = null, string $contentType = self::contentTypes['xpanFileSearch'][0])
    {
        $request = $this->xpanFileSearchRequest($dir, $page, $num, $recursion, $web, $device_id, $key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\XpanFileSearch200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\XpanFileSearch200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\XpanFileSearch200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileSearch200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\XpanFileSearch200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xpanFileSearchAsync
     *
     * 搜索文件
     *
     * @param  string $dir 搜索目录，默认根目录 (required)
     * @param  int $page 页数，从1开始，缺省则返回所有条目 (required)
     * @param  int $num 默认为500，不能修改 (required)
     * @param  int $recursion 是否递归搜索子目录 1:是，0:否（默认） (required)
     * @param  int $web 默认0，为1时返回缩略图信息 (required)
     * @param  string $device_id 设备ID，设备注册接口下发，硬件设备必传 (required)
     * @param  string $key 搜索关键字，最大30字符（UTF8格式） (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileSearchAsync($dir, $page, $num, $recursion, $web, $device_id, $key = null, string $contentType = self::contentTypes['xpanFileSearch'][0])
    {
        return $this->xpanFileSearchAsyncWithHttpInfo($dir, $page, $num, $recursion, $web, $device_id, $key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xpanFileSearchAsyncWithHttpInfo
     *
     * 搜索文件
     *
     * @param  string $dir 搜索目录，默认根目录 (required)
     * @param  int $page 页数，从1开始，缺省则返回所有条目 (required)
     * @param  int $num 默认为500，不能修改 (required)
     * @param  int $recursion 是否递归搜索子目录 1:是，0:否（默认） (required)
     * @param  int $web 默认0，为1时返回缩略图信息 (required)
     * @param  string $device_id 设备ID，设备注册接口下发，硬件设备必传 (required)
     * @param  string $key 搜索关键字，最大30字符（UTF8格式） (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileSearchAsyncWithHttpInfo($dir, $page, $num, $recursion, $web, $device_id, $key = null, string $contentType = self::contentTypes['xpanFileSearch'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileSearch200Response';
        $request = $this->xpanFileSearchRequest($dir, $page, $num, $recursion, $web, $device_id, $key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xpanFileSearch'
     *
     * @param  string $dir 搜索目录，默认根目录 (required)
     * @param  int $page 页数，从1开始，缺省则返回所有条目 (required)
     * @param  int $num 默认为500，不能修改 (required)
     * @param  int $recursion 是否递归搜索子目录 1:是，0:否（默认） (required)
     * @param  int $web 默认0，为1时返回缩略图信息 (required)
     * @param  string $device_id 设备ID，设备注册接口下发，硬件设备必传 (required)
     * @param  string $key 搜索关键字，最大30字符（UTF8格式） (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function xpanFileSearchRequest($dir, $page, $num, $recursion, $web, $device_id, $key = null, string $contentType = self::contentTypes['xpanFileSearch'][0])
    {

        // verify the required parameter 'dir' is set
        if ($dir === null || (is_array($dir) && count($dir) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dir when calling xpanFileSearch'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling xpanFileSearch'
            );
        }

        // verify the required parameter 'num' is set
        if ($num === null || (is_array($num) && count($num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $num when calling xpanFileSearch'
            );
        }

        // verify the required parameter 'recursion' is set
        if ($recursion === null || (is_array($recursion) && count($recursion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recursion when calling xpanFileSearch'
            );
        }

        // verify the required parameter 'web' is set
        if ($web === null || (is_array($web) && count($web) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $web when calling xpanFileSearch'
            );
        }

        // verify the required parameter 'device_id' is set
        if ($device_id === null || (is_array($device_id) && count($device_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_id when calling xpanFileSearch'
            );
        }



        $resourcePath = '/rest/2.0/xpan/file?method=search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dir,
            'dir', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $num,
            'num', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recursion,
            'recursion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $web,
            'web', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $device_id,
            'device_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xpanFileVideolist
     *
     * 获取视频列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果。如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 一页返回的文件数， 默认值为1000, 最大值建议不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的视频 (required)
     * @param  int $web 为1时返回视频预览缩略图 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileVideolist'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response
     */
    public function xpanFileVideolist($parent_path, $page, $num, $order, $desc, $recursion, $web, string $contentType = self::contentTypes['xpanFileVideolist'][0])
    {
        list($response) = $this->xpanFileVideolistWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, $web, $contentType);
        return $response;
    }

    /**
     * Operation xpanFileVideolistWithHttpInfo
     *
     * 获取视频列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果。如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 一页返回的文件数， 默认值为1000, 最大值建议不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的视频 (required)
     * @param  int $web 为1时返回视频预览缩略图 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileVideolist'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function xpanFileVideolistWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, $web, string $contentType = self::contentTypes['xpanFileVideolist'][0])
    {
        $request = $this->xpanFileVideolistRequest($parent_path, $page, $num, $order, $desc, $recursion, $web, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xpanFileVideolistAsync
     *
     * 获取视频列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果。如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 一页返回的文件数， 默认值为1000, 最大值建议不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的视频 (required)
     * @param  int $web 为1时返回视频预览缩略图 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileVideolist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileVideolistAsync($parent_path, $page, $num, $order, $desc, $recursion, $web, string $contentType = self::contentTypes['xpanFileVideolist'][0])
    {
        return $this->xpanFileVideolistAsyncWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, $web, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xpanFileVideolistAsyncWithHttpInfo
     *
     * 获取视频列表
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果。如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 一页返回的文件数， 默认值为1000, 最大值建议不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的视频 (required)
     * @param  int $web 为1时返回视频预览缩略图 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileVideolist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanFileVideolistAsyncWithHttpInfo($parent_path, $page, $num, $order, $desc, $recursion, $web, string $contentType = self::contentTypes['xpanFileVideolist'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\XpanFileDoclist200Response';
        $request = $this->xpanFileVideolistRequest($parent_path, $page, $num, $order, $desc, $recursion, $web, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xpanFileVideolist'
     *
     * @param  string $parent_path 目录名称，以/开头的绝对路径, 默认为/ 路径包含中文时需要UrlEncode编码 给出的示例的路径是/测试目录的UrlEncode编码 (required)
     * @param  int $page 页码，从1开始， 如果不指定页码，则为不分页模式，返回所有的结果。如果指定page参数，则按修改时间倒序排列 (required)
     * @param  int $num 一页返回的文件数， 默认值为1000, 最大值建议不超过1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $recursion 是否需要递归，0为不需要，1为需要，默认为0 递归是指：当目录下有文件夹，使用此参数，可以获取到文件夹下面的视频 (required)
     * @param  int $web 为1时返回视频预览缩略图 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanFileVideolist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function xpanFileVideolistRequest($parent_path, $page, $num, $order, $desc, $recursion, $web, string $contentType = self::contentTypes['xpanFileVideolist'][0])
    {

        // verify the required parameter 'parent_path' is set
        if ($parent_path === null || (is_array($parent_path) && count($parent_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent_path when calling xpanFileVideolist'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling xpanFileVideolist'
            );
        }

        // verify the required parameter 'num' is set
        if ($num === null || (is_array($num) && count($num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $num when calling xpanFileVideolist'
            );
        }

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order when calling xpanFileVideolist'
            );
        }

        // verify the required parameter 'desc' is set
        if ($desc === null || (is_array($desc) && count($desc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $desc when calling xpanFileVideolist'
            );
        }

        // verify the required parameter 'recursion' is set
        if ($recursion === null || (is_array($recursion) && count($recursion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recursion when calling xpanFileVideolist'
            );
        }

        // verify the required parameter 'web' is set
        if ($web === null || (is_array($web) && count($web) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $web when calling xpanFileVideolist'
            );
        }


        $resourcePath = '/rest/2.0/xpan/file?method=videolist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_path,
            'parent_path', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $num,
            'num', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $desc,
            'desc', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recursion,
            'recursion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $web,
            'web', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xpanMultimediaCategorylist
     *
     * 获取分类文件列表
     *
     * @param  int $show_dir 是否展示文件夹，0:否(默认) 1:是 (required)
     * @param  string $parent_path 目录名称，为空时，parent_path &#x3D; \&quot;/\&quot; &amp;&amp; recursion &#x3D; 1 ；路径包含中文时需要进行UrlEncode编码 (required)
     * @param  int $recursion 是否需要递归，0 不递归、1 递归，默认0 (required)
     * @param  string $ext 需要的文件格式，多个格式以英文逗号分隔，示例: txt,epub，默认为category下所有格式 (required)
     * @param  int $start 查询起点，默认为0 (required)
     * @param  int $limit 查询数目，最大1000，默认1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $category 文件类型，1 视频、2 音频、3 图片、4 文档、5 应用、6 其他、7 种子多个category使用英文逗号分隔，示例：3,4 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanMultimediaCategorylist'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\XpanMultimediaCategorylist200Response
     */
    public function xpanMultimediaCategorylist($show_dir, $parent_path, $recursion, $ext, $start, $limit, $order, $desc, $category = null, string $contentType = self::contentTypes['xpanMultimediaCategorylist'][0])
    {
        list($response) = $this->xpanMultimediaCategorylistWithHttpInfo($show_dir, $parent_path, $recursion, $ext, $start, $limit, $order, $desc, $category, $contentType);
        return $response;
    }

    /**
     * Operation xpanMultimediaCategorylistWithHttpInfo
     *
     * 获取分类文件列表
     *
     * @param  int $show_dir 是否展示文件夹，0:否(默认) 1:是 (required)
     * @param  string $parent_path 目录名称，为空时，parent_path &#x3D; \&quot;/\&quot; &amp;&amp; recursion &#x3D; 1 ；路径包含中文时需要进行UrlEncode编码 (required)
     * @param  int $recursion 是否需要递归，0 不递归、1 递归，默认0 (required)
     * @param  string $ext 需要的文件格式，多个格式以英文逗号分隔，示例: txt,epub，默认为category下所有格式 (required)
     * @param  int $start 查询起点，默认为0 (required)
     * @param  int $limit 查询数目，最大1000，默认1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $category 文件类型，1 视频、2 音频、3 图片、4 文档、5 应用、6 其他、7 种子多个category使用英文逗号分隔，示例：3,4 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanMultimediaCategorylist'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\XpanMultimediaCategorylist200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function xpanMultimediaCategorylistWithHttpInfo($show_dir, $parent_path, $recursion, $ext, $start, $limit, $order, $desc, $category = null, string $contentType = self::contentTypes['xpanMultimediaCategorylist'][0])
    {
        $request = $this->xpanMultimediaCategorylistRequest($show_dir, $parent_path, $recursion, $ext, $start, $limit, $order, $desc, $category, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\XpanMultimediaCategorylist200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\XpanMultimediaCategorylist200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\XpanMultimediaCategorylist200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\XpanMultimediaCategorylist200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\XpanMultimediaCategorylist200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xpanMultimediaCategorylistAsync
     *
     * 获取分类文件列表
     *
     * @param  int $show_dir 是否展示文件夹，0:否(默认) 1:是 (required)
     * @param  string $parent_path 目录名称，为空时，parent_path &#x3D; \&quot;/\&quot; &amp;&amp; recursion &#x3D; 1 ；路径包含中文时需要进行UrlEncode编码 (required)
     * @param  int $recursion 是否需要递归，0 不递归、1 递归，默认0 (required)
     * @param  string $ext 需要的文件格式，多个格式以英文逗号分隔，示例: txt,epub，默认为category下所有格式 (required)
     * @param  int $start 查询起点，默认为0 (required)
     * @param  int $limit 查询数目，最大1000，默认1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $category 文件类型，1 视频、2 音频、3 图片、4 文档、5 应用、6 其他、7 种子多个category使用英文逗号分隔，示例：3,4 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanMultimediaCategorylist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanMultimediaCategorylistAsync($show_dir, $parent_path, $recursion, $ext, $start, $limit, $order, $desc, $category = null, string $contentType = self::contentTypes['xpanMultimediaCategorylist'][0])
    {
        return $this->xpanMultimediaCategorylistAsyncWithHttpInfo($show_dir, $parent_path, $recursion, $ext, $start, $limit, $order, $desc, $category, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xpanMultimediaCategorylistAsyncWithHttpInfo
     *
     * 获取分类文件列表
     *
     * @param  int $show_dir 是否展示文件夹，0:否(默认) 1:是 (required)
     * @param  string $parent_path 目录名称，为空时，parent_path &#x3D; \&quot;/\&quot; &amp;&amp; recursion &#x3D; 1 ；路径包含中文时需要进行UrlEncode编码 (required)
     * @param  int $recursion 是否需要递归，0 不递归、1 递归，默认0 (required)
     * @param  string $ext 需要的文件格式，多个格式以英文逗号分隔，示例: txt,epub，默认为category下所有格式 (required)
     * @param  int $start 查询起点，默认为0 (required)
     * @param  int $limit 查询数目，最大1000，默认1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $category 文件类型，1 视频、2 音频、3 图片、4 文档、5 应用、6 其他、7 种子多个category使用英文逗号分隔，示例：3,4 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanMultimediaCategorylist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanMultimediaCategorylistAsyncWithHttpInfo($show_dir, $parent_path, $recursion, $ext, $start, $limit, $order, $desc, $category = null, string $contentType = self::contentTypes['xpanMultimediaCategorylist'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\XpanMultimediaCategorylist200Response';
        $request = $this->xpanMultimediaCategorylistRequest($show_dir, $parent_path, $recursion, $ext, $start, $limit, $order, $desc, $category, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xpanMultimediaCategorylist'
     *
     * @param  int $show_dir 是否展示文件夹，0:否(默认) 1:是 (required)
     * @param  string $parent_path 目录名称，为空时，parent_path &#x3D; \&quot;/\&quot; &amp;&amp; recursion &#x3D; 1 ；路径包含中文时需要进行UrlEncode编码 (required)
     * @param  int $recursion 是否需要递归，0 不递归、1 递归，默认0 (required)
     * @param  string $ext 需要的文件格式，多个格式以英文逗号分隔，示例: txt,epub，默认为category下所有格式 (required)
     * @param  int $start 查询起点，默认为0 (required)
     * @param  int $limit 查询数目，最大1000，默认1000 (required)
     * @param  string $order 排序字段：time按修改时间排序，name按文件名称排序，size按文件大小排序，默认为time (required)
     * @param  string $desc 0为升序，1为降序，默认为1 (required)
     * @param  int $category 文件类型，1 视频、2 音频、3 图片、4 文档、5 应用、6 其他、7 种子多个category使用英文逗号分隔，示例：3,4 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanMultimediaCategorylist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function xpanMultimediaCategorylistRequest($show_dir, $parent_path, $recursion, $ext, $start, $limit, $order, $desc, $category = null, string $contentType = self::contentTypes['xpanMultimediaCategorylist'][0])
    {

        // verify the required parameter 'show_dir' is set
        if ($show_dir === null || (is_array($show_dir) && count($show_dir) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $show_dir when calling xpanMultimediaCategorylist'
            );
        }

        // verify the required parameter 'parent_path' is set
        if ($parent_path === null || (is_array($parent_path) && count($parent_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent_path when calling xpanMultimediaCategorylist'
            );
        }

        // verify the required parameter 'recursion' is set
        if ($recursion === null || (is_array($recursion) && count($recursion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recursion when calling xpanMultimediaCategorylist'
            );
        }

        // verify the required parameter 'ext' is set
        if ($ext === null || (is_array($ext) && count($ext) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ext when calling xpanMultimediaCategorylist'
            );
        }

        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling xpanMultimediaCategorylist'
            );
        }

        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling xpanMultimediaCategorylist'
            );
        }

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order when calling xpanMultimediaCategorylist'
            );
        }

        // verify the required parameter 'desc' is set
        if ($desc === null || (is_array($desc) && count($desc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $desc when calling xpanMultimediaCategorylist'
            );
        }



        $resourcePath = '/rest/2.0/xpan/multimedia?method=categorylist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category,
            'category', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_dir,
            'show_dir', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_path,
            'parent_path', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recursion,
            'recursion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ext,
            'ext', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $desc,
            'desc', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xpanMultimediaFilemetas
     *
     * 查询文件信息
     *
     * @param  int $dlink 是否需要下载地址，0为否，1为是，默认为0。获取到dlink后，参考下载文档进行下载操作 (required)
     * @param  string $path 查询共享目录或专属空间内文件时需要。共享目录格式： /uk-fsid 其中uk为共享目录创建者id， fsid对应共享目录的fsid 专属空间格式：/_pcs_.appdata/xpan/ (required)
     * @param  int $thumb 是否需要缩略图地址，0为否，1为是，默认为0 (required)
     * @param  int $extra 图片是否需要拍摄时间、原图分辨率等其他信息，0 否、1 是，默认0 (required)
     * @param  int $needmedia 视频是否需要展示时长信息，needmedia&#x3D;1时，返回 duration 信息时间单位为秒 （s），转换为向上取整。0 否、1 是，默认0 (required)
     * @param  string[] $fsids 文件id数组，数组中元素是uint64类型，数组大小上限是：100 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanMultimediaFilemetas'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\XpanMultimediaFilemetas200Response
     */
    public function xpanMultimediaFilemetas($dlink, $path, $thumb, $extra, $needmedia, $fsids = null, string $contentType = self::contentTypes['xpanMultimediaFilemetas'][0])
    {
        list($response) = $this->xpanMultimediaFilemetasWithHttpInfo($dlink, $path, $thumb, $extra, $needmedia, $fsids, $contentType);
        return $response;
    }

    /**
     * Operation xpanMultimediaFilemetasWithHttpInfo
     *
     * 查询文件信息
     *
     * @param  int $dlink 是否需要下载地址，0为否，1为是，默认为0。获取到dlink后，参考下载文档进行下载操作 (required)
     * @param  string $path 查询共享目录或专属空间内文件时需要。共享目录格式： /uk-fsid 其中uk为共享目录创建者id， fsid对应共享目录的fsid 专属空间格式：/_pcs_.appdata/xpan/ (required)
     * @param  int $thumb 是否需要缩略图地址，0为否，1为是，默认为0 (required)
     * @param  int $extra 图片是否需要拍摄时间、原图分辨率等其他信息，0 否、1 是，默认0 (required)
     * @param  int $needmedia 视频是否需要展示时长信息，needmedia&#x3D;1时，返回 duration 信息时间单位为秒 （s），转换为向上取整。0 否、1 是，默认0 (required)
     * @param  string[] $fsids 文件id数组，数组中元素是uint64类型，数组大小上限是：100 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanMultimediaFilemetas'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\XpanMultimediaFilemetas200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function xpanMultimediaFilemetasWithHttpInfo($dlink, $path, $thumb, $extra, $needmedia, $fsids = null, string $contentType = self::contentTypes['xpanMultimediaFilemetas'][0])
    {
        $request = $this->xpanMultimediaFilemetasRequest($dlink, $path, $thumb, $extra, $needmedia, $fsids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\XpanMultimediaFilemetas200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\XpanMultimediaFilemetas200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\XpanMultimediaFilemetas200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\XpanMultimediaFilemetas200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\XpanMultimediaFilemetas200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xpanMultimediaFilemetasAsync
     *
     * 查询文件信息
     *
     * @param  int $dlink 是否需要下载地址，0为否，1为是，默认为0。获取到dlink后，参考下载文档进行下载操作 (required)
     * @param  string $path 查询共享目录或专属空间内文件时需要。共享目录格式： /uk-fsid 其中uk为共享目录创建者id， fsid对应共享目录的fsid 专属空间格式：/_pcs_.appdata/xpan/ (required)
     * @param  int $thumb 是否需要缩略图地址，0为否，1为是，默认为0 (required)
     * @param  int $extra 图片是否需要拍摄时间、原图分辨率等其他信息，0 否、1 是，默认0 (required)
     * @param  int $needmedia 视频是否需要展示时长信息，needmedia&#x3D;1时，返回 duration 信息时间单位为秒 （s），转换为向上取整。0 否、1 是，默认0 (required)
     * @param  string[] $fsids 文件id数组，数组中元素是uint64类型，数组大小上限是：100 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanMultimediaFilemetas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanMultimediaFilemetasAsync($dlink, $path, $thumb, $extra, $needmedia, $fsids = null, string $contentType = self::contentTypes['xpanMultimediaFilemetas'][0])
    {
        return $this->xpanMultimediaFilemetasAsyncWithHttpInfo($dlink, $path, $thumb, $extra, $needmedia, $fsids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xpanMultimediaFilemetasAsyncWithHttpInfo
     *
     * 查询文件信息
     *
     * @param  int $dlink 是否需要下载地址，0为否，1为是，默认为0。获取到dlink后，参考下载文档进行下载操作 (required)
     * @param  string $path 查询共享目录或专属空间内文件时需要。共享目录格式： /uk-fsid 其中uk为共享目录创建者id， fsid对应共享目录的fsid 专属空间格式：/_pcs_.appdata/xpan/ (required)
     * @param  int $thumb 是否需要缩略图地址，0为否，1为是，默认为0 (required)
     * @param  int $extra 图片是否需要拍摄时间、原图分辨率等其他信息，0 否、1 是，默认0 (required)
     * @param  int $needmedia 视频是否需要展示时长信息，needmedia&#x3D;1时，返回 duration 信息时间单位为秒 （s），转换为向上取整。0 否、1 是，默认0 (required)
     * @param  string[] $fsids 文件id数组，数组中元素是uint64类型，数组大小上限是：100 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanMultimediaFilemetas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanMultimediaFilemetasAsyncWithHttpInfo($dlink, $path, $thumb, $extra, $needmedia, $fsids = null, string $contentType = self::contentTypes['xpanMultimediaFilemetas'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\XpanMultimediaFilemetas200Response';
        $request = $this->xpanMultimediaFilemetasRequest($dlink, $path, $thumb, $extra, $needmedia, $fsids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xpanMultimediaFilemetas'
     *
     * @param  int $dlink 是否需要下载地址，0为否，1为是，默认为0。获取到dlink后，参考下载文档进行下载操作 (required)
     * @param  string $path 查询共享目录或专属空间内文件时需要。共享目录格式： /uk-fsid 其中uk为共享目录创建者id， fsid对应共享目录的fsid 专属空间格式：/_pcs_.appdata/xpan/ (required)
     * @param  int $thumb 是否需要缩略图地址，0为否，1为是，默认为0 (required)
     * @param  int $extra 图片是否需要拍摄时间、原图分辨率等其他信息，0 否、1 是，默认0 (required)
     * @param  int $needmedia 视频是否需要展示时长信息，needmedia&#x3D;1时，返回 duration 信息时间单位为秒 （s），转换为向上取整。0 否、1 是，默认0 (required)
     * @param  string[] $fsids 文件id数组，数组中元素是uint64类型，数组大小上限是：100 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanMultimediaFilemetas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function xpanMultimediaFilemetasRequest($dlink, $path, $thumb, $extra, $needmedia, $fsids = null, string $contentType = self::contentTypes['xpanMultimediaFilemetas'][0])
    {

        // verify the required parameter 'dlink' is set
        if ($dlink === null || (is_array($dlink) && count($dlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dlink when calling xpanMultimediaFilemetas'
            );
        }

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling xpanMultimediaFilemetas'
            );
        }

        // verify the required parameter 'thumb' is set
        if ($thumb === null || (is_array($thumb) && count($thumb) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thumb when calling xpanMultimediaFilemetas'
            );
        }

        // verify the required parameter 'extra' is set
        if ($extra === null || (is_array($extra) && count($extra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extra when calling xpanMultimediaFilemetas'
            );
        }

        // verify the required parameter 'needmedia' is set
        if ($needmedia === null || (is_array($needmedia) && count($needmedia) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $needmedia when calling xpanMultimediaFilemetas'
            );
        }



        $resourcePath = '/rest/2.0/xpan/multimedia?method=filemetas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fsids,
            'fsids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dlink,
            'dlink', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path,
            'path', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $thumb,
            'thumb', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $extra,
            'extra', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $needmedia,
            'needmedia', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xpanMultimediaListall
     *
     * 递归获取文件列表
     *
     * @param  int $recursion 是否递归，0为否，1为是，默认为0 (required)
     * @param  string $order 排序字段:time(修改时间)，name(文件名)，size(大小，目录无大小)，默认为文件类型 (required)
     * @param  string $desc 0为升序，1为降序，默认为0 (required)
     * @param  int $start 查询起点，默认为0 (required)
     * @param  int $limit 查询数目，默认为1000；如果设置start和limit参数，则建议最大设置为1000 (required)
     * @param  int $ctime 文件上传时间，设置此参数，表示只返回上传时间大于ctime的文件 (required)
     * @param  int $mtime 文件修改时间，设置此参数，表示只返回修改时间大于mtime的文件 (required)
     * @param  int $web 默认为0， 为1时返回缩略图地址 (required)
     * @param  string $path 目录名称绝对路径，必须/开头；路径包含中文时需要UrlEncode编码 ；给出的示例的路径是/测试目录的UrlEncode编码。 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanMultimediaListall'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\XpanMultimediaListall200Response
     */
    public function xpanMultimediaListall($recursion, $order, $desc, $start, $limit, $ctime, $mtime, $web, $path = null, string $contentType = self::contentTypes['xpanMultimediaListall'][0])
    {
        list($response) = $this->xpanMultimediaListallWithHttpInfo($recursion, $order, $desc, $start, $limit, $ctime, $mtime, $web, $path, $contentType);
        return $response;
    }

    /**
     * Operation xpanMultimediaListallWithHttpInfo
     *
     * 递归获取文件列表
     *
     * @param  int $recursion 是否递归，0为否，1为是，默认为0 (required)
     * @param  string $order 排序字段:time(修改时间)，name(文件名)，size(大小，目录无大小)，默认为文件类型 (required)
     * @param  string $desc 0为升序，1为降序，默认为0 (required)
     * @param  int $start 查询起点，默认为0 (required)
     * @param  int $limit 查询数目，默认为1000；如果设置start和limit参数，则建议最大设置为1000 (required)
     * @param  int $ctime 文件上传时间，设置此参数，表示只返回上传时间大于ctime的文件 (required)
     * @param  int $mtime 文件修改时间，设置此参数，表示只返回修改时间大于mtime的文件 (required)
     * @param  int $web 默认为0， 为1时返回缩略图地址 (required)
     * @param  string $path 目录名称绝对路径，必须/开头；路径包含中文时需要UrlEncode编码 ；给出的示例的路径是/测试目录的UrlEncode编码。 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanMultimediaListall'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\XpanMultimediaListall200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function xpanMultimediaListallWithHttpInfo($recursion, $order, $desc, $start, $limit, $ctime, $mtime, $web, $path = null, string $contentType = self::contentTypes['xpanMultimediaListall'][0])
    {
        $request = $this->xpanMultimediaListallRequest($recursion, $order, $desc, $start, $limit, $ctime, $mtime, $web, $path, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\XpanMultimediaListall200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\XpanMultimediaListall200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\XpanMultimediaListall200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\XpanMultimediaListall200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\XpanMultimediaListall200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xpanMultimediaListallAsync
     *
     * 递归获取文件列表
     *
     * @param  int $recursion 是否递归，0为否，1为是，默认为0 (required)
     * @param  string $order 排序字段:time(修改时间)，name(文件名)，size(大小，目录无大小)，默认为文件类型 (required)
     * @param  string $desc 0为升序，1为降序，默认为0 (required)
     * @param  int $start 查询起点，默认为0 (required)
     * @param  int $limit 查询数目，默认为1000；如果设置start和limit参数，则建议最大设置为1000 (required)
     * @param  int $ctime 文件上传时间，设置此参数，表示只返回上传时间大于ctime的文件 (required)
     * @param  int $mtime 文件修改时间，设置此参数，表示只返回修改时间大于mtime的文件 (required)
     * @param  int $web 默认为0， 为1时返回缩略图地址 (required)
     * @param  string $path 目录名称绝对路径，必须/开头；路径包含中文时需要UrlEncode编码 ；给出的示例的路径是/测试目录的UrlEncode编码。 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanMultimediaListall'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanMultimediaListallAsync($recursion, $order, $desc, $start, $limit, $ctime, $mtime, $web, $path = null, string $contentType = self::contentTypes['xpanMultimediaListall'][0])
    {
        return $this->xpanMultimediaListallAsyncWithHttpInfo($recursion, $order, $desc, $start, $limit, $ctime, $mtime, $web, $path, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xpanMultimediaListallAsyncWithHttpInfo
     *
     * 递归获取文件列表
     *
     * @param  int $recursion 是否递归，0为否，1为是，默认为0 (required)
     * @param  string $order 排序字段:time(修改时间)，name(文件名)，size(大小，目录无大小)，默认为文件类型 (required)
     * @param  string $desc 0为升序，1为降序，默认为0 (required)
     * @param  int $start 查询起点，默认为0 (required)
     * @param  int $limit 查询数目，默认为1000；如果设置start和limit参数，则建议最大设置为1000 (required)
     * @param  int $ctime 文件上传时间，设置此参数，表示只返回上传时间大于ctime的文件 (required)
     * @param  int $mtime 文件修改时间，设置此参数，表示只返回修改时间大于mtime的文件 (required)
     * @param  int $web 默认为0， 为1时返回缩略图地址 (required)
     * @param  string $path 目录名称绝对路径，必须/开头；路径包含中文时需要UrlEncode编码 ；给出的示例的路径是/测试目录的UrlEncode编码。 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanMultimediaListall'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanMultimediaListallAsyncWithHttpInfo($recursion, $order, $desc, $start, $limit, $ctime, $mtime, $web, $path = null, string $contentType = self::contentTypes['xpanMultimediaListall'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\XpanMultimediaListall200Response';
        $request = $this->xpanMultimediaListallRequest($recursion, $order, $desc, $start, $limit, $ctime, $mtime, $web, $path, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xpanMultimediaListall'
     *
     * @param  int $recursion 是否递归，0为否，1为是，默认为0 (required)
     * @param  string $order 排序字段:time(修改时间)，name(文件名)，size(大小，目录无大小)，默认为文件类型 (required)
     * @param  string $desc 0为升序，1为降序，默认为0 (required)
     * @param  int $start 查询起点，默认为0 (required)
     * @param  int $limit 查询数目，默认为1000；如果设置start和limit参数，则建议最大设置为1000 (required)
     * @param  int $ctime 文件上传时间，设置此参数，表示只返回上传时间大于ctime的文件 (required)
     * @param  int $mtime 文件修改时间，设置此参数，表示只返回修改时间大于mtime的文件 (required)
     * @param  int $web 默认为0， 为1时返回缩略图地址 (required)
     * @param  string $path 目录名称绝对路径，必须/开头；路径包含中文时需要UrlEncode编码 ；给出的示例的路径是/测试目录的UrlEncode编码。 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanMultimediaListall'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function xpanMultimediaListallRequest($recursion, $order, $desc, $start, $limit, $ctime, $mtime, $web, $path = null, string $contentType = self::contentTypes['xpanMultimediaListall'][0])
    {

        // verify the required parameter 'recursion' is set
        if ($recursion === null || (is_array($recursion) && count($recursion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recursion when calling xpanMultimediaListall'
            );
        }

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order when calling xpanMultimediaListall'
            );
        }

        // verify the required parameter 'desc' is set
        if ($desc === null || (is_array($desc) && count($desc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $desc when calling xpanMultimediaListall'
            );
        }

        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling xpanMultimediaListall'
            );
        }

        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling xpanMultimediaListall'
            );
        }

        // verify the required parameter 'ctime' is set
        if ($ctime === null || (is_array($ctime) && count($ctime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ctime when calling xpanMultimediaListall'
            );
        }

        // verify the required parameter 'mtime' is set
        if ($mtime === null || (is_array($mtime) && count($mtime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mtime when calling xpanMultimediaListall'
            );
        }

        // verify the required parameter 'web' is set
        if ($web === null || (is_array($web) && count($web) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $web when calling xpanMultimediaListall'
            );
        }



        $resourcePath = '/rest/2.0/xpan/multimedia?method=listall';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path,
            'path', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recursion,
            'recursion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $desc,
            'desc', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctime,
            'ctime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mtime,
            'mtime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $web,
            'web', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xpanNasUinfo
     *
     * 获取用户信息
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanNasUinfo'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Clainy\OpenxpanApiClient\Model\XpanNasUinfo200Response
     */
    public function xpanNasUinfo(string $contentType = self::contentTypes['xpanNasUinfo'][0])
    {
        list($response) = $this->xpanNasUinfoWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation xpanNasUinfoWithHttpInfo
     *
     * 获取用户信息
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanNasUinfo'] to see the possible values for this operation
     *
     * @throws \Clainy\OpenxpanApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Clainy\OpenxpanApiClient\Model\XpanNasUinfo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function xpanNasUinfoWithHttpInfo(string $contentType = self::contentTypes['xpanNasUinfo'][0])
    {
        $request = $this->xpanNasUinfoRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Clainy\OpenxpanApiClient\Model\XpanNasUinfo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Clainy\OpenxpanApiClient\Model\XpanNasUinfo200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Clainy\OpenxpanApiClient\Model\XpanNasUinfo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Clainy\OpenxpanApiClient\Model\XpanNasUinfo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Clainy\OpenxpanApiClient\Model\XpanNasUinfo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xpanNasUinfoAsync
     *
     * 获取用户信息
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanNasUinfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanNasUinfoAsync(string $contentType = self::contentTypes['xpanNasUinfo'][0])
    {
        return $this->xpanNasUinfoAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xpanNasUinfoAsyncWithHttpInfo
     *
     * 获取用户信息
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanNasUinfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function xpanNasUinfoAsyncWithHttpInfo(string $contentType = self::contentTypes['xpanNasUinfo'][0])
    {
        $returnType = '\Clainy\OpenxpanApiClient\Model\XpanNasUinfo200Response';
        $request = $this->xpanNasUinfoRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xpanNasUinfo'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xpanNasUinfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function xpanNasUinfoRequest(string $contentType = self::contentTypes['xpanNasUinfo'][0])
    {


        $resourcePath = '/rest/2.0/xpan/nas?method=uinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ((str_contains($resourcePath, "?") && $query) ? "?" :"") . $query,
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
